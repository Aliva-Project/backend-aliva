
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model ProfileConfig
 * 
 */
export type ProfileConfig = $Result.DefaultSelection<Prisma.$ProfileConfigPayload>
/**
 * Model ProfileField
 * 
 */
export type ProfileField = $Result.DefaultSelection<Prisma.$ProfileFieldPayload>
/**
 * Model FamilyHistoryQuestion
 * 
 */
export type FamilyHistoryQuestion = $Result.DefaultSelection<Prisma.$FamilyHistoryQuestionPayload>
/**
 * Model FamilyHistoryAnswer
 * 
 */
export type FamilyHistoryAnswer = $Result.DefaultSelection<Prisma.$FamilyHistoryAnswerPayload>
/**
 * Model ControlHistoryQuestion
 * 
 */
export type ControlHistoryQuestion = $Result.DefaultSelection<Prisma.$ControlHistoryQuestionPayload>
/**
 * Model ControlHistoryAnswer
 * 
 */
export type ControlHistoryAnswer = $Result.DefaultSelection<Prisma.$ControlHistoryAnswerPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


export const FieldType: {
  TEXT: 'TEXT',
  EMAIL: 'EMAIL',
  PHONE: 'PHONE',
  DATE: 'DATE',
  NUMBER: 'NUMBER',
  SELECT: 'SELECT',
  MULTIPLE_CHOICE: 'MULTIPLE_CHOICE',
  BOOLEAN: 'BOOLEAN'
};

export type FieldType = (typeof FieldType)[keyof typeof FieldType]


export const AnswerType: {
  TEXT: 'TEXT',
  SELECT: 'SELECT',
  MULTIPLE_CHOICE: 'MULTIPLE_CHOICE'
};

export type AnswerType = (typeof AnswerType)[keyof typeof AnswerType]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type FieldType = $Enums.FieldType

export const FieldType: typeof $Enums.FieldType

export type AnswerType = $Enums.AnswerType

export const AnswerType: typeof $Enums.AnswerType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.profileConfig`: Exposes CRUD operations for the **ProfileConfig** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProfileConfigs
    * const profileConfigs = await prisma.profileConfig.findMany()
    * ```
    */
  get profileConfig(): Prisma.ProfileConfigDelegate<ExtArgs>;

  /**
   * `prisma.profileField`: Exposes CRUD operations for the **ProfileField** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProfileFields
    * const profileFields = await prisma.profileField.findMany()
    * ```
    */
  get profileField(): Prisma.ProfileFieldDelegate<ExtArgs>;

  /**
   * `prisma.familyHistoryQuestion`: Exposes CRUD operations for the **FamilyHistoryQuestion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FamilyHistoryQuestions
    * const familyHistoryQuestions = await prisma.familyHistoryQuestion.findMany()
    * ```
    */
  get familyHistoryQuestion(): Prisma.FamilyHistoryQuestionDelegate<ExtArgs>;

  /**
   * `prisma.familyHistoryAnswer`: Exposes CRUD operations for the **FamilyHistoryAnswer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FamilyHistoryAnswers
    * const familyHistoryAnswers = await prisma.familyHistoryAnswer.findMany()
    * ```
    */
  get familyHistoryAnswer(): Prisma.FamilyHistoryAnswerDelegate<ExtArgs>;

  /**
   * `prisma.controlHistoryQuestion`: Exposes CRUD operations for the **ControlHistoryQuestion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ControlHistoryQuestions
    * const controlHistoryQuestions = await prisma.controlHistoryQuestion.findMany()
    * ```
    */
  get controlHistoryQuestion(): Prisma.ControlHistoryQuestionDelegate<ExtArgs>;

  /**
   * `prisma.controlHistoryAnswer`: Exposes CRUD operations for the **ControlHistoryAnswer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ControlHistoryAnswers
    * const controlHistoryAnswers = await prisma.controlHistoryAnswer.findMany()
    * ```
    */
  get controlHistoryAnswer(): Prisma.ControlHistoryAnswerDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    ProfileConfig: 'ProfileConfig',
    ProfileField: 'ProfileField',
    FamilyHistoryQuestion: 'FamilyHistoryQuestion',
    FamilyHistoryAnswer: 'FamilyHistoryAnswer',
    ControlHistoryQuestion: 'ControlHistoryQuestion',
    ControlHistoryAnswer: 'ControlHistoryAnswer'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "profileConfig" | "profileField" | "familyHistoryQuestion" | "familyHistoryAnswer" | "controlHistoryQuestion" | "controlHistoryAnswer"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      ProfileConfig: {
        payload: Prisma.$ProfileConfigPayload<ExtArgs>
        fields: Prisma.ProfileConfigFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfileConfigFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfileConfigPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfileConfigFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfileConfigPayload>
          }
          findFirst: {
            args: Prisma.ProfileConfigFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfileConfigPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfileConfigFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfileConfigPayload>
          }
          findMany: {
            args: Prisma.ProfileConfigFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfileConfigPayload>[]
          }
          create: {
            args: Prisma.ProfileConfigCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfileConfigPayload>
          }
          createMany: {
            args: Prisma.ProfileConfigCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProfileConfigDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfileConfigPayload>
          }
          update: {
            args: Prisma.ProfileConfigUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfileConfigPayload>
          }
          deleteMany: {
            args: Prisma.ProfileConfigDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfileConfigUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProfileConfigUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfileConfigPayload>
          }
          aggregate: {
            args: Prisma.ProfileConfigAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfileConfig>
          }
          groupBy: {
            args: Prisma.ProfileConfigGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfileConfigGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfileConfigCountArgs<ExtArgs>
            result: $Utils.Optional<ProfileConfigCountAggregateOutputType> | number
          }
        }
      }
      ProfileField: {
        payload: Prisma.$ProfileFieldPayload<ExtArgs>
        fields: Prisma.ProfileFieldFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfileFieldFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfileFieldPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfileFieldFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfileFieldPayload>
          }
          findFirst: {
            args: Prisma.ProfileFieldFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfileFieldPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfileFieldFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfileFieldPayload>
          }
          findMany: {
            args: Prisma.ProfileFieldFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfileFieldPayload>[]
          }
          create: {
            args: Prisma.ProfileFieldCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfileFieldPayload>
          }
          createMany: {
            args: Prisma.ProfileFieldCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProfileFieldDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfileFieldPayload>
          }
          update: {
            args: Prisma.ProfileFieldUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfileFieldPayload>
          }
          deleteMany: {
            args: Prisma.ProfileFieldDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfileFieldUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProfileFieldUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfileFieldPayload>
          }
          aggregate: {
            args: Prisma.ProfileFieldAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfileField>
          }
          groupBy: {
            args: Prisma.ProfileFieldGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfileFieldGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfileFieldCountArgs<ExtArgs>
            result: $Utils.Optional<ProfileFieldCountAggregateOutputType> | number
          }
        }
      }
      FamilyHistoryQuestion: {
        payload: Prisma.$FamilyHistoryQuestionPayload<ExtArgs>
        fields: Prisma.FamilyHistoryQuestionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FamilyHistoryQuestionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyHistoryQuestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FamilyHistoryQuestionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyHistoryQuestionPayload>
          }
          findFirst: {
            args: Prisma.FamilyHistoryQuestionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyHistoryQuestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FamilyHistoryQuestionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyHistoryQuestionPayload>
          }
          findMany: {
            args: Prisma.FamilyHistoryQuestionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyHistoryQuestionPayload>[]
          }
          create: {
            args: Prisma.FamilyHistoryQuestionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyHistoryQuestionPayload>
          }
          createMany: {
            args: Prisma.FamilyHistoryQuestionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.FamilyHistoryQuestionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyHistoryQuestionPayload>
          }
          update: {
            args: Prisma.FamilyHistoryQuestionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyHistoryQuestionPayload>
          }
          deleteMany: {
            args: Prisma.FamilyHistoryQuestionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FamilyHistoryQuestionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FamilyHistoryQuestionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyHistoryQuestionPayload>
          }
          aggregate: {
            args: Prisma.FamilyHistoryQuestionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFamilyHistoryQuestion>
          }
          groupBy: {
            args: Prisma.FamilyHistoryQuestionGroupByArgs<ExtArgs>
            result: $Utils.Optional<FamilyHistoryQuestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.FamilyHistoryQuestionCountArgs<ExtArgs>
            result: $Utils.Optional<FamilyHistoryQuestionCountAggregateOutputType> | number
          }
        }
      }
      FamilyHistoryAnswer: {
        payload: Prisma.$FamilyHistoryAnswerPayload<ExtArgs>
        fields: Prisma.FamilyHistoryAnswerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FamilyHistoryAnswerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyHistoryAnswerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FamilyHistoryAnswerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyHistoryAnswerPayload>
          }
          findFirst: {
            args: Prisma.FamilyHistoryAnswerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyHistoryAnswerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FamilyHistoryAnswerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyHistoryAnswerPayload>
          }
          findMany: {
            args: Prisma.FamilyHistoryAnswerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyHistoryAnswerPayload>[]
          }
          create: {
            args: Prisma.FamilyHistoryAnswerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyHistoryAnswerPayload>
          }
          createMany: {
            args: Prisma.FamilyHistoryAnswerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.FamilyHistoryAnswerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyHistoryAnswerPayload>
          }
          update: {
            args: Prisma.FamilyHistoryAnswerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyHistoryAnswerPayload>
          }
          deleteMany: {
            args: Prisma.FamilyHistoryAnswerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FamilyHistoryAnswerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FamilyHistoryAnswerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyHistoryAnswerPayload>
          }
          aggregate: {
            args: Prisma.FamilyHistoryAnswerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFamilyHistoryAnswer>
          }
          groupBy: {
            args: Prisma.FamilyHistoryAnswerGroupByArgs<ExtArgs>
            result: $Utils.Optional<FamilyHistoryAnswerGroupByOutputType>[]
          }
          count: {
            args: Prisma.FamilyHistoryAnswerCountArgs<ExtArgs>
            result: $Utils.Optional<FamilyHistoryAnswerCountAggregateOutputType> | number
          }
        }
      }
      ControlHistoryQuestion: {
        payload: Prisma.$ControlHistoryQuestionPayload<ExtArgs>
        fields: Prisma.ControlHistoryQuestionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ControlHistoryQuestionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlHistoryQuestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ControlHistoryQuestionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlHistoryQuestionPayload>
          }
          findFirst: {
            args: Prisma.ControlHistoryQuestionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlHistoryQuestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ControlHistoryQuestionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlHistoryQuestionPayload>
          }
          findMany: {
            args: Prisma.ControlHistoryQuestionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlHistoryQuestionPayload>[]
          }
          create: {
            args: Prisma.ControlHistoryQuestionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlHistoryQuestionPayload>
          }
          createMany: {
            args: Prisma.ControlHistoryQuestionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ControlHistoryQuestionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlHistoryQuestionPayload>
          }
          update: {
            args: Prisma.ControlHistoryQuestionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlHistoryQuestionPayload>
          }
          deleteMany: {
            args: Prisma.ControlHistoryQuestionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ControlHistoryQuestionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ControlHistoryQuestionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlHistoryQuestionPayload>
          }
          aggregate: {
            args: Prisma.ControlHistoryQuestionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateControlHistoryQuestion>
          }
          groupBy: {
            args: Prisma.ControlHistoryQuestionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ControlHistoryQuestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ControlHistoryQuestionCountArgs<ExtArgs>
            result: $Utils.Optional<ControlHistoryQuestionCountAggregateOutputType> | number
          }
        }
      }
      ControlHistoryAnswer: {
        payload: Prisma.$ControlHistoryAnswerPayload<ExtArgs>
        fields: Prisma.ControlHistoryAnswerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ControlHistoryAnswerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlHistoryAnswerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ControlHistoryAnswerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlHistoryAnswerPayload>
          }
          findFirst: {
            args: Prisma.ControlHistoryAnswerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlHistoryAnswerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ControlHistoryAnswerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlHistoryAnswerPayload>
          }
          findMany: {
            args: Prisma.ControlHistoryAnswerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlHistoryAnswerPayload>[]
          }
          create: {
            args: Prisma.ControlHistoryAnswerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlHistoryAnswerPayload>
          }
          createMany: {
            args: Prisma.ControlHistoryAnswerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ControlHistoryAnswerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlHistoryAnswerPayload>
          }
          update: {
            args: Prisma.ControlHistoryAnswerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlHistoryAnswerPayload>
          }
          deleteMany: {
            args: Prisma.ControlHistoryAnswerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ControlHistoryAnswerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ControlHistoryAnswerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlHistoryAnswerPayload>
          }
          aggregate: {
            args: Prisma.ControlHistoryAnswerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateControlHistoryAnswer>
          }
          groupBy: {
            args: Prisma.ControlHistoryAnswerGroupByArgs<ExtArgs>
            result: $Utils.Optional<ControlHistoryAnswerGroupByOutputType>[]
          }
          count: {
            args: Prisma.ControlHistoryAnswerCountArgs<ExtArgs>
            result: $Utils.Optional<ControlHistoryAnswerCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    familyHistoryAnswers: number
    controlHistoryAnswers: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    familyHistoryAnswers?: boolean | UserCountOutputTypeCountFamilyHistoryAnswersArgs
    controlHistoryAnswers?: boolean | UserCountOutputTypeCountControlHistoryAnswersArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFamilyHistoryAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FamilyHistoryAnswerWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountControlHistoryAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ControlHistoryAnswerWhereInput
  }


  /**
   * Count Type FamilyHistoryQuestionCountOutputType
   */

  export type FamilyHistoryQuestionCountOutputType = {
    answers: number
  }

  export type FamilyHistoryQuestionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    answers?: boolean | FamilyHistoryQuestionCountOutputTypeCountAnswersArgs
  }

  // Custom InputTypes
  /**
   * FamilyHistoryQuestionCountOutputType without action
   */
  export type FamilyHistoryQuestionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamilyHistoryQuestionCountOutputType
     */
    select?: FamilyHistoryQuestionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FamilyHistoryQuestionCountOutputType without action
   */
  export type FamilyHistoryQuestionCountOutputTypeCountAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FamilyHistoryAnswerWhereInput
  }


  /**
   * Count Type ControlHistoryQuestionCountOutputType
   */

  export type ControlHistoryQuestionCountOutputType = {
    answers: number
  }

  export type ControlHistoryQuestionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    answers?: boolean | ControlHistoryQuestionCountOutputTypeCountAnswersArgs
  }

  // Custom InputTypes
  /**
   * ControlHistoryQuestionCountOutputType without action
   */
  export type ControlHistoryQuestionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ControlHistoryQuestionCountOutputType
     */
    select?: ControlHistoryQuestionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ControlHistoryQuestionCountOutputType without action
   */
  export type ControlHistoryQuestionCountOutputTypeCountAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ControlHistoryAnswerWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    role: $Enums.Role | null
    phone: string | null
    birthDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    role: $Enums.Role | null
    phone: string | null
    birthDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    role: number
    phone: number
    birthDate: number
    createdAt: number
    updatedAt: number
    profile: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    role?: true
    phone?: true
    birthDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    role?: true
    phone?: true
    birthDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    role?: true
    phone?: true
    birthDate?: true
    createdAt?: true
    updatedAt?: true
    profile?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string
    name: string
    role: $Enums.Role
    phone: string | null
    birthDate: Date | null
    createdAt: Date
    updatedAt: Date
    profile: JsonValue | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    phone?: boolean
    birthDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    profile?: boolean
    familyHistoryAnswers?: boolean | User$familyHistoryAnswersArgs<ExtArgs>
    controlHistoryAnswers?: boolean | User$controlHistoryAnswersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    phone?: boolean
    birthDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    profile?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    familyHistoryAnswers?: boolean | User$familyHistoryAnswersArgs<ExtArgs>
    controlHistoryAnswers?: boolean | User$controlHistoryAnswersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      familyHistoryAnswers: Prisma.$FamilyHistoryAnswerPayload<ExtArgs>[]
      controlHistoryAnswers: Prisma.$ControlHistoryAnswerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
      name: string
      role: $Enums.Role
      phone: string | null
      birthDate: Date | null
      createdAt: Date
      updatedAt: Date
      profile: Prisma.JsonValue | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    familyHistoryAnswers<T extends User$familyHistoryAnswersArgs<ExtArgs> = {}>(args?: Subset<T, User$familyHistoryAnswersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FamilyHistoryAnswerPayload<ExtArgs>, T, "findMany"> | Null>
    controlHistoryAnswers<T extends User$controlHistoryAnswersArgs<ExtArgs> = {}>(args?: Subset<T, User$controlHistoryAnswersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ControlHistoryAnswerPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly phone: FieldRef<"User", 'String'>
    readonly birthDate: FieldRef<"User", 'DateTime'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly profile: FieldRef<"User", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.familyHistoryAnswers
   */
  export type User$familyHistoryAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamilyHistoryAnswer
     */
    select?: FamilyHistoryAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyHistoryAnswerInclude<ExtArgs> | null
    where?: FamilyHistoryAnswerWhereInput
    orderBy?: FamilyHistoryAnswerOrderByWithRelationInput | FamilyHistoryAnswerOrderByWithRelationInput[]
    cursor?: FamilyHistoryAnswerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FamilyHistoryAnswerScalarFieldEnum | FamilyHistoryAnswerScalarFieldEnum[]
  }

  /**
   * User.controlHistoryAnswers
   */
  export type User$controlHistoryAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ControlHistoryAnswer
     */
    select?: ControlHistoryAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlHistoryAnswerInclude<ExtArgs> | null
    where?: ControlHistoryAnswerWhereInput
    orderBy?: ControlHistoryAnswerOrderByWithRelationInput | ControlHistoryAnswerOrderByWithRelationInput[]
    cursor?: ControlHistoryAnswerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ControlHistoryAnswerScalarFieldEnum | ControlHistoryAnswerScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model ProfileConfig
   */

  export type AggregateProfileConfig = {
    _count: ProfileConfigCountAggregateOutputType | null
    _avg: ProfileConfigAvgAggregateOutputType | null
    _sum: ProfileConfigSumAggregateOutputType | null
    _min: ProfileConfigMinAggregateOutputType | null
    _max: ProfileConfigMaxAggregateOutputType | null
  }

  export type ProfileConfigAvgAggregateOutputType = {
    id: number | null
  }

  export type ProfileConfigSumAggregateOutputType = {
    id: number | null
  }

  export type ProfileConfigMinAggregateOutputType = {
    id: number | null
    fieldName: string | null
    displayName: string | null
    isRequired: boolean | null
    fieldType: $Enums.FieldType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfileConfigMaxAggregateOutputType = {
    id: number | null
    fieldName: string | null
    displayName: string | null
    isRequired: boolean | null
    fieldType: $Enums.FieldType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfileConfigCountAggregateOutputType = {
    id: number
    fieldName: number
    displayName: number
    isRequired: number
    fieldType: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProfileConfigAvgAggregateInputType = {
    id?: true
  }

  export type ProfileConfigSumAggregateInputType = {
    id?: true
  }

  export type ProfileConfigMinAggregateInputType = {
    id?: true
    fieldName?: true
    displayName?: true
    isRequired?: true
    fieldType?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfileConfigMaxAggregateInputType = {
    id?: true
    fieldName?: true
    displayName?: true
    isRequired?: true
    fieldType?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfileConfigCountAggregateInputType = {
    id?: true
    fieldName?: true
    displayName?: true
    isRequired?: true
    fieldType?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProfileConfigAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfileConfig to aggregate.
     */
    where?: ProfileConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfileConfigs to fetch.
     */
    orderBy?: ProfileConfigOrderByWithRelationInput | ProfileConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfileConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfileConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfileConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProfileConfigs
    **/
    _count?: true | ProfileConfigCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfileConfigAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfileConfigSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfileConfigMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfileConfigMaxAggregateInputType
  }

  export type GetProfileConfigAggregateType<T extends ProfileConfigAggregateArgs> = {
        [P in keyof T & keyof AggregateProfileConfig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfileConfig[P]>
      : GetScalarType<T[P], AggregateProfileConfig[P]>
  }




  export type ProfileConfigGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileConfigWhereInput
    orderBy?: ProfileConfigOrderByWithAggregationInput | ProfileConfigOrderByWithAggregationInput[]
    by: ProfileConfigScalarFieldEnum[] | ProfileConfigScalarFieldEnum
    having?: ProfileConfigScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfileConfigCountAggregateInputType | true
    _avg?: ProfileConfigAvgAggregateInputType
    _sum?: ProfileConfigSumAggregateInputType
    _min?: ProfileConfigMinAggregateInputType
    _max?: ProfileConfigMaxAggregateInputType
  }

  export type ProfileConfigGroupByOutputType = {
    id: number
    fieldName: string
    displayName: string
    isRequired: boolean
    fieldType: $Enums.FieldType
    createdAt: Date
    updatedAt: Date
    _count: ProfileConfigCountAggregateOutputType | null
    _avg: ProfileConfigAvgAggregateOutputType | null
    _sum: ProfileConfigSumAggregateOutputType | null
    _min: ProfileConfigMinAggregateOutputType | null
    _max: ProfileConfigMaxAggregateOutputType | null
  }

  type GetProfileConfigGroupByPayload<T extends ProfileConfigGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfileConfigGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfileConfigGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfileConfigGroupByOutputType[P]>
            : GetScalarType<T[P], ProfileConfigGroupByOutputType[P]>
        }
      >
    >


  export type ProfileConfigSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fieldName?: boolean
    displayName?: boolean
    isRequired?: boolean
    fieldType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["profileConfig"]>


  export type ProfileConfigSelectScalar = {
    id?: boolean
    fieldName?: boolean
    displayName?: boolean
    isRequired?: boolean
    fieldType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $ProfileConfigPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProfileConfig"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      fieldName: string
      displayName: string
      isRequired: boolean
      fieldType: $Enums.FieldType
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["profileConfig"]>
    composites: {}
  }

  type ProfileConfigGetPayload<S extends boolean | null | undefined | ProfileConfigDefaultArgs> = $Result.GetResult<Prisma.$ProfileConfigPayload, S>

  type ProfileConfigCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProfileConfigFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProfileConfigCountAggregateInputType | true
    }

  export interface ProfileConfigDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProfileConfig'], meta: { name: 'ProfileConfig' } }
    /**
     * Find zero or one ProfileConfig that matches the filter.
     * @param {ProfileConfigFindUniqueArgs} args - Arguments to find a ProfileConfig
     * @example
     * // Get one ProfileConfig
     * const profileConfig = await prisma.profileConfig.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfileConfigFindUniqueArgs>(args: SelectSubset<T, ProfileConfigFindUniqueArgs<ExtArgs>>): Prisma__ProfileConfigClient<$Result.GetResult<Prisma.$ProfileConfigPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ProfileConfig that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProfileConfigFindUniqueOrThrowArgs} args - Arguments to find a ProfileConfig
     * @example
     * // Get one ProfileConfig
     * const profileConfig = await prisma.profileConfig.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfileConfigFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfileConfigFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfileConfigClient<$Result.GetResult<Prisma.$ProfileConfigPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ProfileConfig that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileConfigFindFirstArgs} args - Arguments to find a ProfileConfig
     * @example
     * // Get one ProfileConfig
     * const profileConfig = await prisma.profileConfig.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfileConfigFindFirstArgs>(args?: SelectSubset<T, ProfileConfigFindFirstArgs<ExtArgs>>): Prisma__ProfileConfigClient<$Result.GetResult<Prisma.$ProfileConfigPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ProfileConfig that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileConfigFindFirstOrThrowArgs} args - Arguments to find a ProfileConfig
     * @example
     * // Get one ProfileConfig
     * const profileConfig = await prisma.profileConfig.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfileConfigFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfileConfigFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfileConfigClient<$Result.GetResult<Prisma.$ProfileConfigPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ProfileConfigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileConfigFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProfileConfigs
     * const profileConfigs = await prisma.profileConfig.findMany()
     * 
     * // Get first 10 ProfileConfigs
     * const profileConfigs = await prisma.profileConfig.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profileConfigWithIdOnly = await prisma.profileConfig.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfileConfigFindManyArgs>(args?: SelectSubset<T, ProfileConfigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfileConfigPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ProfileConfig.
     * @param {ProfileConfigCreateArgs} args - Arguments to create a ProfileConfig.
     * @example
     * // Create one ProfileConfig
     * const ProfileConfig = await prisma.profileConfig.create({
     *   data: {
     *     // ... data to create a ProfileConfig
     *   }
     * })
     * 
     */
    create<T extends ProfileConfigCreateArgs>(args: SelectSubset<T, ProfileConfigCreateArgs<ExtArgs>>): Prisma__ProfileConfigClient<$Result.GetResult<Prisma.$ProfileConfigPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ProfileConfigs.
     * @param {ProfileConfigCreateManyArgs} args - Arguments to create many ProfileConfigs.
     * @example
     * // Create many ProfileConfigs
     * const profileConfig = await prisma.profileConfig.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfileConfigCreateManyArgs>(args?: SelectSubset<T, ProfileConfigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProfileConfig.
     * @param {ProfileConfigDeleteArgs} args - Arguments to delete one ProfileConfig.
     * @example
     * // Delete one ProfileConfig
     * const ProfileConfig = await prisma.profileConfig.delete({
     *   where: {
     *     // ... filter to delete one ProfileConfig
     *   }
     * })
     * 
     */
    delete<T extends ProfileConfigDeleteArgs>(args: SelectSubset<T, ProfileConfigDeleteArgs<ExtArgs>>): Prisma__ProfileConfigClient<$Result.GetResult<Prisma.$ProfileConfigPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ProfileConfig.
     * @param {ProfileConfigUpdateArgs} args - Arguments to update one ProfileConfig.
     * @example
     * // Update one ProfileConfig
     * const profileConfig = await prisma.profileConfig.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfileConfigUpdateArgs>(args: SelectSubset<T, ProfileConfigUpdateArgs<ExtArgs>>): Prisma__ProfileConfigClient<$Result.GetResult<Prisma.$ProfileConfigPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ProfileConfigs.
     * @param {ProfileConfigDeleteManyArgs} args - Arguments to filter ProfileConfigs to delete.
     * @example
     * // Delete a few ProfileConfigs
     * const { count } = await prisma.profileConfig.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfileConfigDeleteManyArgs>(args?: SelectSubset<T, ProfileConfigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProfileConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileConfigUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProfileConfigs
     * const profileConfig = await prisma.profileConfig.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfileConfigUpdateManyArgs>(args: SelectSubset<T, ProfileConfigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProfileConfig.
     * @param {ProfileConfigUpsertArgs} args - Arguments to update or create a ProfileConfig.
     * @example
     * // Update or create a ProfileConfig
     * const profileConfig = await prisma.profileConfig.upsert({
     *   create: {
     *     // ... data to create a ProfileConfig
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProfileConfig we want to update
     *   }
     * })
     */
    upsert<T extends ProfileConfigUpsertArgs>(args: SelectSubset<T, ProfileConfigUpsertArgs<ExtArgs>>): Prisma__ProfileConfigClient<$Result.GetResult<Prisma.$ProfileConfigPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ProfileConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileConfigCountArgs} args - Arguments to filter ProfileConfigs to count.
     * @example
     * // Count the number of ProfileConfigs
     * const count = await prisma.profileConfig.count({
     *   where: {
     *     // ... the filter for the ProfileConfigs we want to count
     *   }
     * })
    **/
    count<T extends ProfileConfigCountArgs>(
      args?: Subset<T, ProfileConfigCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileConfigCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProfileConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileConfigAggregateArgs>(args: Subset<T, ProfileConfigAggregateArgs>): Prisma.PrismaPromise<GetProfileConfigAggregateType<T>>

    /**
     * Group by ProfileConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileConfigGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfileConfigGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfileConfigGroupByArgs['orderBy'] }
        : { orderBy?: ProfileConfigGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfileConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProfileConfig model
   */
  readonly fields: ProfileConfigFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProfileConfig.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfileConfigClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProfileConfig model
   */ 
  interface ProfileConfigFieldRefs {
    readonly id: FieldRef<"ProfileConfig", 'Int'>
    readonly fieldName: FieldRef<"ProfileConfig", 'String'>
    readonly displayName: FieldRef<"ProfileConfig", 'String'>
    readonly isRequired: FieldRef<"ProfileConfig", 'Boolean'>
    readonly fieldType: FieldRef<"ProfileConfig", 'FieldType'>
    readonly createdAt: FieldRef<"ProfileConfig", 'DateTime'>
    readonly updatedAt: FieldRef<"ProfileConfig", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProfileConfig findUnique
   */
  export type ProfileConfigFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfileConfig
     */
    select?: ProfileConfigSelect<ExtArgs> | null
    /**
     * Filter, which ProfileConfig to fetch.
     */
    where: ProfileConfigWhereUniqueInput
  }

  /**
   * ProfileConfig findUniqueOrThrow
   */
  export type ProfileConfigFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfileConfig
     */
    select?: ProfileConfigSelect<ExtArgs> | null
    /**
     * Filter, which ProfileConfig to fetch.
     */
    where: ProfileConfigWhereUniqueInput
  }

  /**
   * ProfileConfig findFirst
   */
  export type ProfileConfigFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfileConfig
     */
    select?: ProfileConfigSelect<ExtArgs> | null
    /**
     * Filter, which ProfileConfig to fetch.
     */
    where?: ProfileConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfileConfigs to fetch.
     */
    orderBy?: ProfileConfigOrderByWithRelationInput | ProfileConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfileConfigs.
     */
    cursor?: ProfileConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfileConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfileConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfileConfigs.
     */
    distinct?: ProfileConfigScalarFieldEnum | ProfileConfigScalarFieldEnum[]
  }

  /**
   * ProfileConfig findFirstOrThrow
   */
  export type ProfileConfigFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfileConfig
     */
    select?: ProfileConfigSelect<ExtArgs> | null
    /**
     * Filter, which ProfileConfig to fetch.
     */
    where?: ProfileConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfileConfigs to fetch.
     */
    orderBy?: ProfileConfigOrderByWithRelationInput | ProfileConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfileConfigs.
     */
    cursor?: ProfileConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfileConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfileConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfileConfigs.
     */
    distinct?: ProfileConfigScalarFieldEnum | ProfileConfigScalarFieldEnum[]
  }

  /**
   * ProfileConfig findMany
   */
  export type ProfileConfigFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfileConfig
     */
    select?: ProfileConfigSelect<ExtArgs> | null
    /**
     * Filter, which ProfileConfigs to fetch.
     */
    where?: ProfileConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfileConfigs to fetch.
     */
    orderBy?: ProfileConfigOrderByWithRelationInput | ProfileConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProfileConfigs.
     */
    cursor?: ProfileConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfileConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfileConfigs.
     */
    skip?: number
    distinct?: ProfileConfigScalarFieldEnum | ProfileConfigScalarFieldEnum[]
  }

  /**
   * ProfileConfig create
   */
  export type ProfileConfigCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfileConfig
     */
    select?: ProfileConfigSelect<ExtArgs> | null
    /**
     * The data needed to create a ProfileConfig.
     */
    data: XOR<ProfileConfigCreateInput, ProfileConfigUncheckedCreateInput>
  }

  /**
   * ProfileConfig createMany
   */
  export type ProfileConfigCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProfileConfigs.
     */
    data: ProfileConfigCreateManyInput | ProfileConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProfileConfig update
   */
  export type ProfileConfigUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfileConfig
     */
    select?: ProfileConfigSelect<ExtArgs> | null
    /**
     * The data needed to update a ProfileConfig.
     */
    data: XOR<ProfileConfigUpdateInput, ProfileConfigUncheckedUpdateInput>
    /**
     * Choose, which ProfileConfig to update.
     */
    where: ProfileConfigWhereUniqueInput
  }

  /**
   * ProfileConfig updateMany
   */
  export type ProfileConfigUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProfileConfigs.
     */
    data: XOR<ProfileConfigUpdateManyMutationInput, ProfileConfigUncheckedUpdateManyInput>
    /**
     * Filter which ProfileConfigs to update
     */
    where?: ProfileConfigWhereInput
  }

  /**
   * ProfileConfig upsert
   */
  export type ProfileConfigUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfileConfig
     */
    select?: ProfileConfigSelect<ExtArgs> | null
    /**
     * The filter to search for the ProfileConfig to update in case it exists.
     */
    where: ProfileConfigWhereUniqueInput
    /**
     * In case the ProfileConfig found by the `where` argument doesn't exist, create a new ProfileConfig with this data.
     */
    create: XOR<ProfileConfigCreateInput, ProfileConfigUncheckedCreateInput>
    /**
     * In case the ProfileConfig was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfileConfigUpdateInput, ProfileConfigUncheckedUpdateInput>
  }

  /**
   * ProfileConfig delete
   */
  export type ProfileConfigDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfileConfig
     */
    select?: ProfileConfigSelect<ExtArgs> | null
    /**
     * Filter which ProfileConfig to delete.
     */
    where: ProfileConfigWhereUniqueInput
  }

  /**
   * ProfileConfig deleteMany
   */
  export type ProfileConfigDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfileConfigs to delete
     */
    where?: ProfileConfigWhereInput
  }

  /**
   * ProfileConfig without action
   */
  export type ProfileConfigDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfileConfig
     */
    select?: ProfileConfigSelect<ExtArgs> | null
  }


  /**
   * Model ProfileField
   */

  export type AggregateProfileField = {
    _count: ProfileFieldCountAggregateOutputType | null
    _avg: ProfileFieldAvgAggregateOutputType | null
    _sum: ProfileFieldSumAggregateOutputType | null
    _min: ProfileFieldMinAggregateOutputType | null
    _max: ProfileFieldMaxAggregateOutputType | null
  }

  export type ProfileFieldAvgAggregateOutputType = {
    id: number | null
    order: number | null
  }

  export type ProfileFieldSumAggregateOutputType = {
    id: number | null
    order: number | null
  }

  export type ProfileFieldMinAggregateOutputType = {
    id: number | null
    name: string | null
    label: string | null
    type: $Enums.FieldType | null
    required: boolean | null
    order: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfileFieldMaxAggregateOutputType = {
    id: number | null
    name: string | null
    label: string | null
    type: $Enums.FieldType | null
    required: boolean | null
    order: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfileFieldCountAggregateOutputType = {
    id: number
    name: number
    label: number
    type: number
    required: number
    order: number
    options: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProfileFieldAvgAggregateInputType = {
    id?: true
    order?: true
  }

  export type ProfileFieldSumAggregateInputType = {
    id?: true
    order?: true
  }

  export type ProfileFieldMinAggregateInputType = {
    id?: true
    name?: true
    label?: true
    type?: true
    required?: true
    order?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfileFieldMaxAggregateInputType = {
    id?: true
    name?: true
    label?: true
    type?: true
    required?: true
    order?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfileFieldCountAggregateInputType = {
    id?: true
    name?: true
    label?: true
    type?: true
    required?: true
    order?: true
    options?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProfileFieldAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfileField to aggregate.
     */
    where?: ProfileFieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfileFields to fetch.
     */
    orderBy?: ProfileFieldOrderByWithRelationInput | ProfileFieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfileFieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfileFields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfileFields.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProfileFields
    **/
    _count?: true | ProfileFieldCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfileFieldAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfileFieldSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfileFieldMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfileFieldMaxAggregateInputType
  }

  export type GetProfileFieldAggregateType<T extends ProfileFieldAggregateArgs> = {
        [P in keyof T & keyof AggregateProfileField]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfileField[P]>
      : GetScalarType<T[P], AggregateProfileField[P]>
  }




  export type ProfileFieldGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileFieldWhereInput
    orderBy?: ProfileFieldOrderByWithAggregationInput | ProfileFieldOrderByWithAggregationInput[]
    by: ProfileFieldScalarFieldEnum[] | ProfileFieldScalarFieldEnum
    having?: ProfileFieldScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfileFieldCountAggregateInputType | true
    _avg?: ProfileFieldAvgAggregateInputType
    _sum?: ProfileFieldSumAggregateInputType
    _min?: ProfileFieldMinAggregateInputType
    _max?: ProfileFieldMaxAggregateInputType
  }

  export type ProfileFieldGroupByOutputType = {
    id: number
    name: string
    label: string
    type: $Enums.FieldType
    required: boolean
    order: number
    options: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: ProfileFieldCountAggregateOutputType | null
    _avg: ProfileFieldAvgAggregateOutputType | null
    _sum: ProfileFieldSumAggregateOutputType | null
    _min: ProfileFieldMinAggregateOutputType | null
    _max: ProfileFieldMaxAggregateOutputType | null
  }

  type GetProfileFieldGroupByPayload<T extends ProfileFieldGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfileFieldGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfileFieldGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfileFieldGroupByOutputType[P]>
            : GetScalarType<T[P], ProfileFieldGroupByOutputType[P]>
        }
      >
    >


  export type ProfileFieldSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    label?: boolean
    type?: boolean
    required?: boolean
    order?: boolean
    options?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["profileField"]>


  export type ProfileFieldSelectScalar = {
    id?: boolean
    name?: boolean
    label?: boolean
    type?: boolean
    required?: boolean
    order?: boolean
    options?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $ProfileFieldPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProfileField"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      label: string
      type: $Enums.FieldType
      required: boolean
      order: number
      options: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["profileField"]>
    composites: {}
  }

  type ProfileFieldGetPayload<S extends boolean | null | undefined | ProfileFieldDefaultArgs> = $Result.GetResult<Prisma.$ProfileFieldPayload, S>

  type ProfileFieldCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProfileFieldFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProfileFieldCountAggregateInputType | true
    }

  export interface ProfileFieldDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProfileField'], meta: { name: 'ProfileField' } }
    /**
     * Find zero or one ProfileField that matches the filter.
     * @param {ProfileFieldFindUniqueArgs} args - Arguments to find a ProfileField
     * @example
     * // Get one ProfileField
     * const profileField = await prisma.profileField.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfileFieldFindUniqueArgs>(args: SelectSubset<T, ProfileFieldFindUniqueArgs<ExtArgs>>): Prisma__ProfileFieldClient<$Result.GetResult<Prisma.$ProfileFieldPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ProfileField that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProfileFieldFindUniqueOrThrowArgs} args - Arguments to find a ProfileField
     * @example
     * // Get one ProfileField
     * const profileField = await prisma.profileField.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfileFieldFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfileFieldFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfileFieldClient<$Result.GetResult<Prisma.$ProfileFieldPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ProfileField that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFieldFindFirstArgs} args - Arguments to find a ProfileField
     * @example
     * // Get one ProfileField
     * const profileField = await prisma.profileField.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfileFieldFindFirstArgs>(args?: SelectSubset<T, ProfileFieldFindFirstArgs<ExtArgs>>): Prisma__ProfileFieldClient<$Result.GetResult<Prisma.$ProfileFieldPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ProfileField that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFieldFindFirstOrThrowArgs} args - Arguments to find a ProfileField
     * @example
     * // Get one ProfileField
     * const profileField = await prisma.profileField.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfileFieldFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfileFieldFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfileFieldClient<$Result.GetResult<Prisma.$ProfileFieldPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ProfileFields that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFieldFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProfileFields
     * const profileFields = await prisma.profileField.findMany()
     * 
     * // Get first 10 ProfileFields
     * const profileFields = await prisma.profileField.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profileFieldWithIdOnly = await prisma.profileField.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfileFieldFindManyArgs>(args?: SelectSubset<T, ProfileFieldFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfileFieldPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ProfileField.
     * @param {ProfileFieldCreateArgs} args - Arguments to create a ProfileField.
     * @example
     * // Create one ProfileField
     * const ProfileField = await prisma.profileField.create({
     *   data: {
     *     // ... data to create a ProfileField
     *   }
     * })
     * 
     */
    create<T extends ProfileFieldCreateArgs>(args: SelectSubset<T, ProfileFieldCreateArgs<ExtArgs>>): Prisma__ProfileFieldClient<$Result.GetResult<Prisma.$ProfileFieldPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ProfileFields.
     * @param {ProfileFieldCreateManyArgs} args - Arguments to create many ProfileFields.
     * @example
     * // Create many ProfileFields
     * const profileField = await prisma.profileField.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfileFieldCreateManyArgs>(args?: SelectSubset<T, ProfileFieldCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProfileField.
     * @param {ProfileFieldDeleteArgs} args - Arguments to delete one ProfileField.
     * @example
     * // Delete one ProfileField
     * const ProfileField = await prisma.profileField.delete({
     *   where: {
     *     // ... filter to delete one ProfileField
     *   }
     * })
     * 
     */
    delete<T extends ProfileFieldDeleteArgs>(args: SelectSubset<T, ProfileFieldDeleteArgs<ExtArgs>>): Prisma__ProfileFieldClient<$Result.GetResult<Prisma.$ProfileFieldPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ProfileField.
     * @param {ProfileFieldUpdateArgs} args - Arguments to update one ProfileField.
     * @example
     * // Update one ProfileField
     * const profileField = await prisma.profileField.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfileFieldUpdateArgs>(args: SelectSubset<T, ProfileFieldUpdateArgs<ExtArgs>>): Prisma__ProfileFieldClient<$Result.GetResult<Prisma.$ProfileFieldPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ProfileFields.
     * @param {ProfileFieldDeleteManyArgs} args - Arguments to filter ProfileFields to delete.
     * @example
     * // Delete a few ProfileFields
     * const { count } = await prisma.profileField.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfileFieldDeleteManyArgs>(args?: SelectSubset<T, ProfileFieldDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProfileFields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFieldUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProfileFields
     * const profileField = await prisma.profileField.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfileFieldUpdateManyArgs>(args: SelectSubset<T, ProfileFieldUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProfileField.
     * @param {ProfileFieldUpsertArgs} args - Arguments to update or create a ProfileField.
     * @example
     * // Update or create a ProfileField
     * const profileField = await prisma.profileField.upsert({
     *   create: {
     *     // ... data to create a ProfileField
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProfileField we want to update
     *   }
     * })
     */
    upsert<T extends ProfileFieldUpsertArgs>(args: SelectSubset<T, ProfileFieldUpsertArgs<ExtArgs>>): Prisma__ProfileFieldClient<$Result.GetResult<Prisma.$ProfileFieldPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ProfileFields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFieldCountArgs} args - Arguments to filter ProfileFields to count.
     * @example
     * // Count the number of ProfileFields
     * const count = await prisma.profileField.count({
     *   where: {
     *     // ... the filter for the ProfileFields we want to count
     *   }
     * })
    **/
    count<T extends ProfileFieldCountArgs>(
      args?: Subset<T, ProfileFieldCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileFieldCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProfileField.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFieldAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileFieldAggregateArgs>(args: Subset<T, ProfileFieldAggregateArgs>): Prisma.PrismaPromise<GetProfileFieldAggregateType<T>>

    /**
     * Group by ProfileField.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFieldGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfileFieldGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfileFieldGroupByArgs['orderBy'] }
        : { orderBy?: ProfileFieldGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfileFieldGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileFieldGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProfileField model
   */
  readonly fields: ProfileFieldFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProfileField.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfileFieldClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProfileField model
   */ 
  interface ProfileFieldFieldRefs {
    readonly id: FieldRef<"ProfileField", 'Int'>
    readonly name: FieldRef<"ProfileField", 'String'>
    readonly label: FieldRef<"ProfileField", 'String'>
    readonly type: FieldRef<"ProfileField", 'FieldType'>
    readonly required: FieldRef<"ProfileField", 'Boolean'>
    readonly order: FieldRef<"ProfileField", 'Int'>
    readonly options: FieldRef<"ProfileField", 'Json'>
    readonly createdAt: FieldRef<"ProfileField", 'DateTime'>
    readonly updatedAt: FieldRef<"ProfileField", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProfileField findUnique
   */
  export type ProfileFieldFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfileField
     */
    select?: ProfileFieldSelect<ExtArgs> | null
    /**
     * Filter, which ProfileField to fetch.
     */
    where: ProfileFieldWhereUniqueInput
  }

  /**
   * ProfileField findUniqueOrThrow
   */
  export type ProfileFieldFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfileField
     */
    select?: ProfileFieldSelect<ExtArgs> | null
    /**
     * Filter, which ProfileField to fetch.
     */
    where: ProfileFieldWhereUniqueInput
  }

  /**
   * ProfileField findFirst
   */
  export type ProfileFieldFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfileField
     */
    select?: ProfileFieldSelect<ExtArgs> | null
    /**
     * Filter, which ProfileField to fetch.
     */
    where?: ProfileFieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfileFields to fetch.
     */
    orderBy?: ProfileFieldOrderByWithRelationInput | ProfileFieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfileFields.
     */
    cursor?: ProfileFieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfileFields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfileFields.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfileFields.
     */
    distinct?: ProfileFieldScalarFieldEnum | ProfileFieldScalarFieldEnum[]
  }

  /**
   * ProfileField findFirstOrThrow
   */
  export type ProfileFieldFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfileField
     */
    select?: ProfileFieldSelect<ExtArgs> | null
    /**
     * Filter, which ProfileField to fetch.
     */
    where?: ProfileFieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfileFields to fetch.
     */
    orderBy?: ProfileFieldOrderByWithRelationInput | ProfileFieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfileFields.
     */
    cursor?: ProfileFieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfileFields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfileFields.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfileFields.
     */
    distinct?: ProfileFieldScalarFieldEnum | ProfileFieldScalarFieldEnum[]
  }

  /**
   * ProfileField findMany
   */
  export type ProfileFieldFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfileField
     */
    select?: ProfileFieldSelect<ExtArgs> | null
    /**
     * Filter, which ProfileFields to fetch.
     */
    where?: ProfileFieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfileFields to fetch.
     */
    orderBy?: ProfileFieldOrderByWithRelationInput | ProfileFieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProfileFields.
     */
    cursor?: ProfileFieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfileFields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfileFields.
     */
    skip?: number
    distinct?: ProfileFieldScalarFieldEnum | ProfileFieldScalarFieldEnum[]
  }

  /**
   * ProfileField create
   */
  export type ProfileFieldCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfileField
     */
    select?: ProfileFieldSelect<ExtArgs> | null
    /**
     * The data needed to create a ProfileField.
     */
    data: XOR<ProfileFieldCreateInput, ProfileFieldUncheckedCreateInput>
  }

  /**
   * ProfileField createMany
   */
  export type ProfileFieldCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProfileFields.
     */
    data: ProfileFieldCreateManyInput | ProfileFieldCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProfileField update
   */
  export type ProfileFieldUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfileField
     */
    select?: ProfileFieldSelect<ExtArgs> | null
    /**
     * The data needed to update a ProfileField.
     */
    data: XOR<ProfileFieldUpdateInput, ProfileFieldUncheckedUpdateInput>
    /**
     * Choose, which ProfileField to update.
     */
    where: ProfileFieldWhereUniqueInput
  }

  /**
   * ProfileField updateMany
   */
  export type ProfileFieldUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProfileFields.
     */
    data: XOR<ProfileFieldUpdateManyMutationInput, ProfileFieldUncheckedUpdateManyInput>
    /**
     * Filter which ProfileFields to update
     */
    where?: ProfileFieldWhereInput
  }

  /**
   * ProfileField upsert
   */
  export type ProfileFieldUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfileField
     */
    select?: ProfileFieldSelect<ExtArgs> | null
    /**
     * The filter to search for the ProfileField to update in case it exists.
     */
    where: ProfileFieldWhereUniqueInput
    /**
     * In case the ProfileField found by the `where` argument doesn't exist, create a new ProfileField with this data.
     */
    create: XOR<ProfileFieldCreateInput, ProfileFieldUncheckedCreateInput>
    /**
     * In case the ProfileField was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfileFieldUpdateInput, ProfileFieldUncheckedUpdateInput>
  }

  /**
   * ProfileField delete
   */
  export type ProfileFieldDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfileField
     */
    select?: ProfileFieldSelect<ExtArgs> | null
    /**
     * Filter which ProfileField to delete.
     */
    where: ProfileFieldWhereUniqueInput
  }

  /**
   * ProfileField deleteMany
   */
  export type ProfileFieldDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfileFields to delete
     */
    where?: ProfileFieldWhereInput
  }

  /**
   * ProfileField without action
   */
  export type ProfileFieldDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfileField
     */
    select?: ProfileFieldSelect<ExtArgs> | null
  }


  /**
   * Model FamilyHistoryQuestion
   */

  export type AggregateFamilyHistoryQuestion = {
    _count: FamilyHistoryQuestionCountAggregateOutputType | null
    _avg: FamilyHistoryQuestionAvgAggregateOutputType | null
    _sum: FamilyHistoryQuestionSumAggregateOutputType | null
    _min: FamilyHistoryQuestionMinAggregateOutputType | null
    _max: FamilyHistoryQuestionMaxAggregateOutputType | null
  }

  export type FamilyHistoryQuestionAvgAggregateOutputType = {
    id: number | null
    order: number | null
  }

  export type FamilyHistoryQuestionSumAggregateOutputType = {
    id: number | null
    order: number | null
  }

  export type FamilyHistoryQuestionMinAggregateOutputType = {
    id: number | null
    question: string | null
    description: string | null
    isRequired: boolean | null
    answerType: $Enums.AnswerType | null
    allowMultiple: boolean | null
    order: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FamilyHistoryQuestionMaxAggregateOutputType = {
    id: number | null
    question: string | null
    description: string | null
    isRequired: boolean | null
    answerType: $Enums.AnswerType | null
    allowMultiple: boolean | null
    order: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FamilyHistoryQuestionCountAggregateOutputType = {
    id: number
    question: number
    description: number
    isRequired: number
    answerType: number
    options: number
    allowMultiple: number
    order: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FamilyHistoryQuestionAvgAggregateInputType = {
    id?: true
    order?: true
  }

  export type FamilyHistoryQuestionSumAggregateInputType = {
    id?: true
    order?: true
  }

  export type FamilyHistoryQuestionMinAggregateInputType = {
    id?: true
    question?: true
    description?: true
    isRequired?: true
    answerType?: true
    allowMultiple?: true
    order?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FamilyHistoryQuestionMaxAggregateInputType = {
    id?: true
    question?: true
    description?: true
    isRequired?: true
    answerType?: true
    allowMultiple?: true
    order?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FamilyHistoryQuestionCountAggregateInputType = {
    id?: true
    question?: true
    description?: true
    isRequired?: true
    answerType?: true
    options?: true
    allowMultiple?: true
    order?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FamilyHistoryQuestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FamilyHistoryQuestion to aggregate.
     */
    where?: FamilyHistoryQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FamilyHistoryQuestions to fetch.
     */
    orderBy?: FamilyHistoryQuestionOrderByWithRelationInput | FamilyHistoryQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FamilyHistoryQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FamilyHistoryQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FamilyHistoryQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FamilyHistoryQuestions
    **/
    _count?: true | FamilyHistoryQuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FamilyHistoryQuestionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FamilyHistoryQuestionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FamilyHistoryQuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FamilyHistoryQuestionMaxAggregateInputType
  }

  export type GetFamilyHistoryQuestionAggregateType<T extends FamilyHistoryQuestionAggregateArgs> = {
        [P in keyof T & keyof AggregateFamilyHistoryQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFamilyHistoryQuestion[P]>
      : GetScalarType<T[P], AggregateFamilyHistoryQuestion[P]>
  }




  export type FamilyHistoryQuestionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FamilyHistoryQuestionWhereInput
    orderBy?: FamilyHistoryQuestionOrderByWithAggregationInput | FamilyHistoryQuestionOrderByWithAggregationInput[]
    by: FamilyHistoryQuestionScalarFieldEnum[] | FamilyHistoryQuestionScalarFieldEnum
    having?: FamilyHistoryQuestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FamilyHistoryQuestionCountAggregateInputType | true
    _avg?: FamilyHistoryQuestionAvgAggregateInputType
    _sum?: FamilyHistoryQuestionSumAggregateInputType
    _min?: FamilyHistoryQuestionMinAggregateInputType
    _max?: FamilyHistoryQuestionMaxAggregateInputType
  }

  export type FamilyHistoryQuestionGroupByOutputType = {
    id: number
    question: string
    description: string | null
    isRequired: boolean
    answerType: $Enums.AnswerType
    options: JsonValue | null
    allowMultiple: boolean
    order: number
    createdAt: Date
    updatedAt: Date
    _count: FamilyHistoryQuestionCountAggregateOutputType | null
    _avg: FamilyHistoryQuestionAvgAggregateOutputType | null
    _sum: FamilyHistoryQuestionSumAggregateOutputType | null
    _min: FamilyHistoryQuestionMinAggregateOutputType | null
    _max: FamilyHistoryQuestionMaxAggregateOutputType | null
  }

  type GetFamilyHistoryQuestionGroupByPayload<T extends FamilyHistoryQuestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FamilyHistoryQuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FamilyHistoryQuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FamilyHistoryQuestionGroupByOutputType[P]>
            : GetScalarType<T[P], FamilyHistoryQuestionGroupByOutputType[P]>
        }
      >
    >


  export type FamilyHistoryQuestionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
    description?: boolean
    isRequired?: boolean
    answerType?: boolean
    options?: boolean
    allowMultiple?: boolean
    order?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    answers?: boolean | FamilyHistoryQuestion$answersArgs<ExtArgs>
    _count?: boolean | FamilyHistoryQuestionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["familyHistoryQuestion"]>


  export type FamilyHistoryQuestionSelectScalar = {
    id?: boolean
    question?: boolean
    description?: boolean
    isRequired?: boolean
    answerType?: boolean
    options?: boolean
    allowMultiple?: boolean
    order?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FamilyHistoryQuestionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    answers?: boolean | FamilyHistoryQuestion$answersArgs<ExtArgs>
    _count?: boolean | FamilyHistoryQuestionCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $FamilyHistoryQuestionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FamilyHistoryQuestion"
    objects: {
      answers: Prisma.$FamilyHistoryAnswerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      question: string
      description: string | null
      isRequired: boolean
      answerType: $Enums.AnswerType
      options: Prisma.JsonValue | null
      allowMultiple: boolean
      order: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["familyHistoryQuestion"]>
    composites: {}
  }

  type FamilyHistoryQuestionGetPayload<S extends boolean | null | undefined | FamilyHistoryQuestionDefaultArgs> = $Result.GetResult<Prisma.$FamilyHistoryQuestionPayload, S>

  type FamilyHistoryQuestionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FamilyHistoryQuestionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FamilyHistoryQuestionCountAggregateInputType | true
    }

  export interface FamilyHistoryQuestionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FamilyHistoryQuestion'], meta: { name: 'FamilyHistoryQuestion' } }
    /**
     * Find zero or one FamilyHistoryQuestion that matches the filter.
     * @param {FamilyHistoryQuestionFindUniqueArgs} args - Arguments to find a FamilyHistoryQuestion
     * @example
     * // Get one FamilyHistoryQuestion
     * const familyHistoryQuestion = await prisma.familyHistoryQuestion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FamilyHistoryQuestionFindUniqueArgs>(args: SelectSubset<T, FamilyHistoryQuestionFindUniqueArgs<ExtArgs>>): Prisma__FamilyHistoryQuestionClient<$Result.GetResult<Prisma.$FamilyHistoryQuestionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FamilyHistoryQuestion that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FamilyHistoryQuestionFindUniqueOrThrowArgs} args - Arguments to find a FamilyHistoryQuestion
     * @example
     * // Get one FamilyHistoryQuestion
     * const familyHistoryQuestion = await prisma.familyHistoryQuestion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FamilyHistoryQuestionFindUniqueOrThrowArgs>(args: SelectSubset<T, FamilyHistoryQuestionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FamilyHistoryQuestionClient<$Result.GetResult<Prisma.$FamilyHistoryQuestionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FamilyHistoryQuestion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamilyHistoryQuestionFindFirstArgs} args - Arguments to find a FamilyHistoryQuestion
     * @example
     * // Get one FamilyHistoryQuestion
     * const familyHistoryQuestion = await prisma.familyHistoryQuestion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FamilyHistoryQuestionFindFirstArgs>(args?: SelectSubset<T, FamilyHistoryQuestionFindFirstArgs<ExtArgs>>): Prisma__FamilyHistoryQuestionClient<$Result.GetResult<Prisma.$FamilyHistoryQuestionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FamilyHistoryQuestion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamilyHistoryQuestionFindFirstOrThrowArgs} args - Arguments to find a FamilyHistoryQuestion
     * @example
     * // Get one FamilyHistoryQuestion
     * const familyHistoryQuestion = await prisma.familyHistoryQuestion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FamilyHistoryQuestionFindFirstOrThrowArgs>(args?: SelectSubset<T, FamilyHistoryQuestionFindFirstOrThrowArgs<ExtArgs>>): Prisma__FamilyHistoryQuestionClient<$Result.GetResult<Prisma.$FamilyHistoryQuestionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FamilyHistoryQuestions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamilyHistoryQuestionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FamilyHistoryQuestions
     * const familyHistoryQuestions = await prisma.familyHistoryQuestion.findMany()
     * 
     * // Get first 10 FamilyHistoryQuestions
     * const familyHistoryQuestions = await prisma.familyHistoryQuestion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const familyHistoryQuestionWithIdOnly = await prisma.familyHistoryQuestion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FamilyHistoryQuestionFindManyArgs>(args?: SelectSubset<T, FamilyHistoryQuestionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FamilyHistoryQuestionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FamilyHistoryQuestion.
     * @param {FamilyHistoryQuestionCreateArgs} args - Arguments to create a FamilyHistoryQuestion.
     * @example
     * // Create one FamilyHistoryQuestion
     * const FamilyHistoryQuestion = await prisma.familyHistoryQuestion.create({
     *   data: {
     *     // ... data to create a FamilyHistoryQuestion
     *   }
     * })
     * 
     */
    create<T extends FamilyHistoryQuestionCreateArgs>(args: SelectSubset<T, FamilyHistoryQuestionCreateArgs<ExtArgs>>): Prisma__FamilyHistoryQuestionClient<$Result.GetResult<Prisma.$FamilyHistoryQuestionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FamilyHistoryQuestions.
     * @param {FamilyHistoryQuestionCreateManyArgs} args - Arguments to create many FamilyHistoryQuestions.
     * @example
     * // Create many FamilyHistoryQuestions
     * const familyHistoryQuestion = await prisma.familyHistoryQuestion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FamilyHistoryQuestionCreateManyArgs>(args?: SelectSubset<T, FamilyHistoryQuestionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FamilyHistoryQuestion.
     * @param {FamilyHistoryQuestionDeleteArgs} args - Arguments to delete one FamilyHistoryQuestion.
     * @example
     * // Delete one FamilyHistoryQuestion
     * const FamilyHistoryQuestion = await prisma.familyHistoryQuestion.delete({
     *   where: {
     *     // ... filter to delete one FamilyHistoryQuestion
     *   }
     * })
     * 
     */
    delete<T extends FamilyHistoryQuestionDeleteArgs>(args: SelectSubset<T, FamilyHistoryQuestionDeleteArgs<ExtArgs>>): Prisma__FamilyHistoryQuestionClient<$Result.GetResult<Prisma.$FamilyHistoryQuestionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FamilyHistoryQuestion.
     * @param {FamilyHistoryQuestionUpdateArgs} args - Arguments to update one FamilyHistoryQuestion.
     * @example
     * // Update one FamilyHistoryQuestion
     * const familyHistoryQuestion = await prisma.familyHistoryQuestion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FamilyHistoryQuestionUpdateArgs>(args: SelectSubset<T, FamilyHistoryQuestionUpdateArgs<ExtArgs>>): Prisma__FamilyHistoryQuestionClient<$Result.GetResult<Prisma.$FamilyHistoryQuestionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FamilyHistoryQuestions.
     * @param {FamilyHistoryQuestionDeleteManyArgs} args - Arguments to filter FamilyHistoryQuestions to delete.
     * @example
     * // Delete a few FamilyHistoryQuestions
     * const { count } = await prisma.familyHistoryQuestion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FamilyHistoryQuestionDeleteManyArgs>(args?: SelectSubset<T, FamilyHistoryQuestionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FamilyHistoryQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamilyHistoryQuestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FamilyHistoryQuestions
     * const familyHistoryQuestion = await prisma.familyHistoryQuestion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FamilyHistoryQuestionUpdateManyArgs>(args: SelectSubset<T, FamilyHistoryQuestionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FamilyHistoryQuestion.
     * @param {FamilyHistoryQuestionUpsertArgs} args - Arguments to update or create a FamilyHistoryQuestion.
     * @example
     * // Update or create a FamilyHistoryQuestion
     * const familyHistoryQuestion = await prisma.familyHistoryQuestion.upsert({
     *   create: {
     *     // ... data to create a FamilyHistoryQuestion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FamilyHistoryQuestion we want to update
     *   }
     * })
     */
    upsert<T extends FamilyHistoryQuestionUpsertArgs>(args: SelectSubset<T, FamilyHistoryQuestionUpsertArgs<ExtArgs>>): Prisma__FamilyHistoryQuestionClient<$Result.GetResult<Prisma.$FamilyHistoryQuestionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FamilyHistoryQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamilyHistoryQuestionCountArgs} args - Arguments to filter FamilyHistoryQuestions to count.
     * @example
     * // Count the number of FamilyHistoryQuestions
     * const count = await prisma.familyHistoryQuestion.count({
     *   where: {
     *     // ... the filter for the FamilyHistoryQuestions we want to count
     *   }
     * })
    **/
    count<T extends FamilyHistoryQuestionCountArgs>(
      args?: Subset<T, FamilyHistoryQuestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FamilyHistoryQuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FamilyHistoryQuestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamilyHistoryQuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FamilyHistoryQuestionAggregateArgs>(args: Subset<T, FamilyHistoryQuestionAggregateArgs>): Prisma.PrismaPromise<GetFamilyHistoryQuestionAggregateType<T>>

    /**
     * Group by FamilyHistoryQuestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamilyHistoryQuestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FamilyHistoryQuestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FamilyHistoryQuestionGroupByArgs['orderBy'] }
        : { orderBy?: FamilyHistoryQuestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FamilyHistoryQuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFamilyHistoryQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FamilyHistoryQuestion model
   */
  readonly fields: FamilyHistoryQuestionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FamilyHistoryQuestion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FamilyHistoryQuestionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    answers<T extends FamilyHistoryQuestion$answersArgs<ExtArgs> = {}>(args?: Subset<T, FamilyHistoryQuestion$answersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FamilyHistoryAnswerPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FamilyHistoryQuestion model
   */ 
  interface FamilyHistoryQuestionFieldRefs {
    readonly id: FieldRef<"FamilyHistoryQuestion", 'Int'>
    readonly question: FieldRef<"FamilyHistoryQuestion", 'String'>
    readonly description: FieldRef<"FamilyHistoryQuestion", 'String'>
    readonly isRequired: FieldRef<"FamilyHistoryQuestion", 'Boolean'>
    readonly answerType: FieldRef<"FamilyHistoryQuestion", 'AnswerType'>
    readonly options: FieldRef<"FamilyHistoryQuestion", 'Json'>
    readonly allowMultiple: FieldRef<"FamilyHistoryQuestion", 'Boolean'>
    readonly order: FieldRef<"FamilyHistoryQuestion", 'Int'>
    readonly createdAt: FieldRef<"FamilyHistoryQuestion", 'DateTime'>
    readonly updatedAt: FieldRef<"FamilyHistoryQuestion", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FamilyHistoryQuestion findUnique
   */
  export type FamilyHistoryQuestionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamilyHistoryQuestion
     */
    select?: FamilyHistoryQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyHistoryQuestionInclude<ExtArgs> | null
    /**
     * Filter, which FamilyHistoryQuestion to fetch.
     */
    where: FamilyHistoryQuestionWhereUniqueInput
  }

  /**
   * FamilyHistoryQuestion findUniqueOrThrow
   */
  export type FamilyHistoryQuestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamilyHistoryQuestion
     */
    select?: FamilyHistoryQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyHistoryQuestionInclude<ExtArgs> | null
    /**
     * Filter, which FamilyHistoryQuestion to fetch.
     */
    where: FamilyHistoryQuestionWhereUniqueInput
  }

  /**
   * FamilyHistoryQuestion findFirst
   */
  export type FamilyHistoryQuestionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamilyHistoryQuestion
     */
    select?: FamilyHistoryQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyHistoryQuestionInclude<ExtArgs> | null
    /**
     * Filter, which FamilyHistoryQuestion to fetch.
     */
    where?: FamilyHistoryQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FamilyHistoryQuestions to fetch.
     */
    orderBy?: FamilyHistoryQuestionOrderByWithRelationInput | FamilyHistoryQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FamilyHistoryQuestions.
     */
    cursor?: FamilyHistoryQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FamilyHistoryQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FamilyHistoryQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FamilyHistoryQuestions.
     */
    distinct?: FamilyHistoryQuestionScalarFieldEnum | FamilyHistoryQuestionScalarFieldEnum[]
  }

  /**
   * FamilyHistoryQuestion findFirstOrThrow
   */
  export type FamilyHistoryQuestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamilyHistoryQuestion
     */
    select?: FamilyHistoryQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyHistoryQuestionInclude<ExtArgs> | null
    /**
     * Filter, which FamilyHistoryQuestion to fetch.
     */
    where?: FamilyHistoryQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FamilyHistoryQuestions to fetch.
     */
    orderBy?: FamilyHistoryQuestionOrderByWithRelationInput | FamilyHistoryQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FamilyHistoryQuestions.
     */
    cursor?: FamilyHistoryQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FamilyHistoryQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FamilyHistoryQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FamilyHistoryQuestions.
     */
    distinct?: FamilyHistoryQuestionScalarFieldEnum | FamilyHistoryQuestionScalarFieldEnum[]
  }

  /**
   * FamilyHistoryQuestion findMany
   */
  export type FamilyHistoryQuestionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamilyHistoryQuestion
     */
    select?: FamilyHistoryQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyHistoryQuestionInclude<ExtArgs> | null
    /**
     * Filter, which FamilyHistoryQuestions to fetch.
     */
    where?: FamilyHistoryQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FamilyHistoryQuestions to fetch.
     */
    orderBy?: FamilyHistoryQuestionOrderByWithRelationInput | FamilyHistoryQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FamilyHistoryQuestions.
     */
    cursor?: FamilyHistoryQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FamilyHistoryQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FamilyHistoryQuestions.
     */
    skip?: number
    distinct?: FamilyHistoryQuestionScalarFieldEnum | FamilyHistoryQuestionScalarFieldEnum[]
  }

  /**
   * FamilyHistoryQuestion create
   */
  export type FamilyHistoryQuestionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamilyHistoryQuestion
     */
    select?: FamilyHistoryQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyHistoryQuestionInclude<ExtArgs> | null
    /**
     * The data needed to create a FamilyHistoryQuestion.
     */
    data: XOR<FamilyHistoryQuestionCreateInput, FamilyHistoryQuestionUncheckedCreateInput>
  }

  /**
   * FamilyHistoryQuestion createMany
   */
  export type FamilyHistoryQuestionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FamilyHistoryQuestions.
     */
    data: FamilyHistoryQuestionCreateManyInput | FamilyHistoryQuestionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FamilyHistoryQuestion update
   */
  export type FamilyHistoryQuestionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamilyHistoryQuestion
     */
    select?: FamilyHistoryQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyHistoryQuestionInclude<ExtArgs> | null
    /**
     * The data needed to update a FamilyHistoryQuestion.
     */
    data: XOR<FamilyHistoryQuestionUpdateInput, FamilyHistoryQuestionUncheckedUpdateInput>
    /**
     * Choose, which FamilyHistoryQuestion to update.
     */
    where: FamilyHistoryQuestionWhereUniqueInput
  }

  /**
   * FamilyHistoryQuestion updateMany
   */
  export type FamilyHistoryQuestionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FamilyHistoryQuestions.
     */
    data: XOR<FamilyHistoryQuestionUpdateManyMutationInput, FamilyHistoryQuestionUncheckedUpdateManyInput>
    /**
     * Filter which FamilyHistoryQuestions to update
     */
    where?: FamilyHistoryQuestionWhereInput
  }

  /**
   * FamilyHistoryQuestion upsert
   */
  export type FamilyHistoryQuestionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamilyHistoryQuestion
     */
    select?: FamilyHistoryQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyHistoryQuestionInclude<ExtArgs> | null
    /**
     * The filter to search for the FamilyHistoryQuestion to update in case it exists.
     */
    where: FamilyHistoryQuestionWhereUniqueInput
    /**
     * In case the FamilyHistoryQuestion found by the `where` argument doesn't exist, create a new FamilyHistoryQuestion with this data.
     */
    create: XOR<FamilyHistoryQuestionCreateInput, FamilyHistoryQuestionUncheckedCreateInput>
    /**
     * In case the FamilyHistoryQuestion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FamilyHistoryQuestionUpdateInput, FamilyHistoryQuestionUncheckedUpdateInput>
  }

  /**
   * FamilyHistoryQuestion delete
   */
  export type FamilyHistoryQuestionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamilyHistoryQuestion
     */
    select?: FamilyHistoryQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyHistoryQuestionInclude<ExtArgs> | null
    /**
     * Filter which FamilyHistoryQuestion to delete.
     */
    where: FamilyHistoryQuestionWhereUniqueInput
  }

  /**
   * FamilyHistoryQuestion deleteMany
   */
  export type FamilyHistoryQuestionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FamilyHistoryQuestions to delete
     */
    where?: FamilyHistoryQuestionWhereInput
  }

  /**
   * FamilyHistoryQuestion.answers
   */
  export type FamilyHistoryQuestion$answersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamilyHistoryAnswer
     */
    select?: FamilyHistoryAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyHistoryAnswerInclude<ExtArgs> | null
    where?: FamilyHistoryAnswerWhereInput
    orderBy?: FamilyHistoryAnswerOrderByWithRelationInput | FamilyHistoryAnswerOrderByWithRelationInput[]
    cursor?: FamilyHistoryAnswerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FamilyHistoryAnswerScalarFieldEnum | FamilyHistoryAnswerScalarFieldEnum[]
  }

  /**
   * FamilyHistoryQuestion without action
   */
  export type FamilyHistoryQuestionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamilyHistoryQuestion
     */
    select?: FamilyHistoryQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyHistoryQuestionInclude<ExtArgs> | null
  }


  /**
   * Model FamilyHistoryAnswer
   */

  export type AggregateFamilyHistoryAnswer = {
    _count: FamilyHistoryAnswerCountAggregateOutputType | null
    _avg: FamilyHistoryAnswerAvgAggregateOutputType | null
    _sum: FamilyHistoryAnswerSumAggregateOutputType | null
    _min: FamilyHistoryAnswerMinAggregateOutputType | null
    _max: FamilyHistoryAnswerMaxAggregateOutputType | null
  }

  export type FamilyHistoryAnswerAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    questionId: number | null
  }

  export type FamilyHistoryAnswerSumAggregateOutputType = {
    id: number | null
    userId: number | null
    questionId: number | null
  }

  export type FamilyHistoryAnswerMinAggregateOutputType = {
    id: number | null
    userId: number | null
    questionId: number | null
    answer: string | null
    details: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FamilyHistoryAnswerMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    questionId: number | null
    answer: string | null
    details: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FamilyHistoryAnswerCountAggregateOutputType = {
    id: number
    userId: number
    questionId: number
    answer: number
    details: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FamilyHistoryAnswerAvgAggregateInputType = {
    id?: true
    userId?: true
    questionId?: true
  }

  export type FamilyHistoryAnswerSumAggregateInputType = {
    id?: true
    userId?: true
    questionId?: true
  }

  export type FamilyHistoryAnswerMinAggregateInputType = {
    id?: true
    userId?: true
    questionId?: true
    answer?: true
    details?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FamilyHistoryAnswerMaxAggregateInputType = {
    id?: true
    userId?: true
    questionId?: true
    answer?: true
    details?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FamilyHistoryAnswerCountAggregateInputType = {
    id?: true
    userId?: true
    questionId?: true
    answer?: true
    details?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FamilyHistoryAnswerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FamilyHistoryAnswer to aggregate.
     */
    where?: FamilyHistoryAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FamilyHistoryAnswers to fetch.
     */
    orderBy?: FamilyHistoryAnswerOrderByWithRelationInput | FamilyHistoryAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FamilyHistoryAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FamilyHistoryAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FamilyHistoryAnswers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FamilyHistoryAnswers
    **/
    _count?: true | FamilyHistoryAnswerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FamilyHistoryAnswerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FamilyHistoryAnswerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FamilyHistoryAnswerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FamilyHistoryAnswerMaxAggregateInputType
  }

  export type GetFamilyHistoryAnswerAggregateType<T extends FamilyHistoryAnswerAggregateArgs> = {
        [P in keyof T & keyof AggregateFamilyHistoryAnswer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFamilyHistoryAnswer[P]>
      : GetScalarType<T[P], AggregateFamilyHistoryAnswer[P]>
  }




  export type FamilyHistoryAnswerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FamilyHistoryAnswerWhereInput
    orderBy?: FamilyHistoryAnswerOrderByWithAggregationInput | FamilyHistoryAnswerOrderByWithAggregationInput[]
    by: FamilyHistoryAnswerScalarFieldEnum[] | FamilyHistoryAnswerScalarFieldEnum
    having?: FamilyHistoryAnswerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FamilyHistoryAnswerCountAggregateInputType | true
    _avg?: FamilyHistoryAnswerAvgAggregateInputType
    _sum?: FamilyHistoryAnswerSumAggregateInputType
    _min?: FamilyHistoryAnswerMinAggregateInputType
    _max?: FamilyHistoryAnswerMaxAggregateInputType
  }

  export type FamilyHistoryAnswerGroupByOutputType = {
    id: number
    userId: number
    questionId: number
    answer: string
    details: string | null
    createdAt: Date
    updatedAt: Date
    _count: FamilyHistoryAnswerCountAggregateOutputType | null
    _avg: FamilyHistoryAnswerAvgAggregateOutputType | null
    _sum: FamilyHistoryAnswerSumAggregateOutputType | null
    _min: FamilyHistoryAnswerMinAggregateOutputType | null
    _max: FamilyHistoryAnswerMaxAggregateOutputType | null
  }

  type GetFamilyHistoryAnswerGroupByPayload<T extends FamilyHistoryAnswerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FamilyHistoryAnswerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FamilyHistoryAnswerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FamilyHistoryAnswerGroupByOutputType[P]>
            : GetScalarType<T[P], FamilyHistoryAnswerGroupByOutputType[P]>
        }
      >
    >


  export type FamilyHistoryAnswerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    questionId?: boolean
    answer?: boolean
    details?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    question?: boolean | FamilyHistoryQuestionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["familyHistoryAnswer"]>


  export type FamilyHistoryAnswerSelectScalar = {
    id?: boolean
    userId?: boolean
    questionId?: boolean
    answer?: boolean
    details?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FamilyHistoryAnswerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    question?: boolean | FamilyHistoryQuestionDefaultArgs<ExtArgs>
  }

  export type $FamilyHistoryAnswerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FamilyHistoryAnswer"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      question: Prisma.$FamilyHistoryQuestionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      questionId: number
      answer: string
      details: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["familyHistoryAnswer"]>
    composites: {}
  }

  type FamilyHistoryAnswerGetPayload<S extends boolean | null | undefined | FamilyHistoryAnswerDefaultArgs> = $Result.GetResult<Prisma.$FamilyHistoryAnswerPayload, S>

  type FamilyHistoryAnswerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FamilyHistoryAnswerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FamilyHistoryAnswerCountAggregateInputType | true
    }

  export interface FamilyHistoryAnswerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FamilyHistoryAnswer'], meta: { name: 'FamilyHistoryAnswer' } }
    /**
     * Find zero or one FamilyHistoryAnswer that matches the filter.
     * @param {FamilyHistoryAnswerFindUniqueArgs} args - Arguments to find a FamilyHistoryAnswer
     * @example
     * // Get one FamilyHistoryAnswer
     * const familyHistoryAnswer = await prisma.familyHistoryAnswer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FamilyHistoryAnswerFindUniqueArgs>(args: SelectSubset<T, FamilyHistoryAnswerFindUniqueArgs<ExtArgs>>): Prisma__FamilyHistoryAnswerClient<$Result.GetResult<Prisma.$FamilyHistoryAnswerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FamilyHistoryAnswer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FamilyHistoryAnswerFindUniqueOrThrowArgs} args - Arguments to find a FamilyHistoryAnswer
     * @example
     * // Get one FamilyHistoryAnswer
     * const familyHistoryAnswer = await prisma.familyHistoryAnswer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FamilyHistoryAnswerFindUniqueOrThrowArgs>(args: SelectSubset<T, FamilyHistoryAnswerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FamilyHistoryAnswerClient<$Result.GetResult<Prisma.$FamilyHistoryAnswerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FamilyHistoryAnswer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamilyHistoryAnswerFindFirstArgs} args - Arguments to find a FamilyHistoryAnswer
     * @example
     * // Get one FamilyHistoryAnswer
     * const familyHistoryAnswer = await prisma.familyHistoryAnswer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FamilyHistoryAnswerFindFirstArgs>(args?: SelectSubset<T, FamilyHistoryAnswerFindFirstArgs<ExtArgs>>): Prisma__FamilyHistoryAnswerClient<$Result.GetResult<Prisma.$FamilyHistoryAnswerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FamilyHistoryAnswer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamilyHistoryAnswerFindFirstOrThrowArgs} args - Arguments to find a FamilyHistoryAnswer
     * @example
     * // Get one FamilyHistoryAnswer
     * const familyHistoryAnswer = await prisma.familyHistoryAnswer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FamilyHistoryAnswerFindFirstOrThrowArgs>(args?: SelectSubset<T, FamilyHistoryAnswerFindFirstOrThrowArgs<ExtArgs>>): Prisma__FamilyHistoryAnswerClient<$Result.GetResult<Prisma.$FamilyHistoryAnswerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FamilyHistoryAnswers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamilyHistoryAnswerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FamilyHistoryAnswers
     * const familyHistoryAnswers = await prisma.familyHistoryAnswer.findMany()
     * 
     * // Get first 10 FamilyHistoryAnswers
     * const familyHistoryAnswers = await prisma.familyHistoryAnswer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const familyHistoryAnswerWithIdOnly = await prisma.familyHistoryAnswer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FamilyHistoryAnswerFindManyArgs>(args?: SelectSubset<T, FamilyHistoryAnswerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FamilyHistoryAnswerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FamilyHistoryAnswer.
     * @param {FamilyHistoryAnswerCreateArgs} args - Arguments to create a FamilyHistoryAnswer.
     * @example
     * // Create one FamilyHistoryAnswer
     * const FamilyHistoryAnswer = await prisma.familyHistoryAnswer.create({
     *   data: {
     *     // ... data to create a FamilyHistoryAnswer
     *   }
     * })
     * 
     */
    create<T extends FamilyHistoryAnswerCreateArgs>(args: SelectSubset<T, FamilyHistoryAnswerCreateArgs<ExtArgs>>): Prisma__FamilyHistoryAnswerClient<$Result.GetResult<Prisma.$FamilyHistoryAnswerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FamilyHistoryAnswers.
     * @param {FamilyHistoryAnswerCreateManyArgs} args - Arguments to create many FamilyHistoryAnswers.
     * @example
     * // Create many FamilyHistoryAnswers
     * const familyHistoryAnswer = await prisma.familyHistoryAnswer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FamilyHistoryAnswerCreateManyArgs>(args?: SelectSubset<T, FamilyHistoryAnswerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FamilyHistoryAnswer.
     * @param {FamilyHistoryAnswerDeleteArgs} args - Arguments to delete one FamilyHistoryAnswer.
     * @example
     * // Delete one FamilyHistoryAnswer
     * const FamilyHistoryAnswer = await prisma.familyHistoryAnswer.delete({
     *   where: {
     *     // ... filter to delete one FamilyHistoryAnswer
     *   }
     * })
     * 
     */
    delete<T extends FamilyHistoryAnswerDeleteArgs>(args: SelectSubset<T, FamilyHistoryAnswerDeleteArgs<ExtArgs>>): Prisma__FamilyHistoryAnswerClient<$Result.GetResult<Prisma.$FamilyHistoryAnswerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FamilyHistoryAnswer.
     * @param {FamilyHistoryAnswerUpdateArgs} args - Arguments to update one FamilyHistoryAnswer.
     * @example
     * // Update one FamilyHistoryAnswer
     * const familyHistoryAnswer = await prisma.familyHistoryAnswer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FamilyHistoryAnswerUpdateArgs>(args: SelectSubset<T, FamilyHistoryAnswerUpdateArgs<ExtArgs>>): Prisma__FamilyHistoryAnswerClient<$Result.GetResult<Prisma.$FamilyHistoryAnswerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FamilyHistoryAnswers.
     * @param {FamilyHistoryAnswerDeleteManyArgs} args - Arguments to filter FamilyHistoryAnswers to delete.
     * @example
     * // Delete a few FamilyHistoryAnswers
     * const { count } = await prisma.familyHistoryAnswer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FamilyHistoryAnswerDeleteManyArgs>(args?: SelectSubset<T, FamilyHistoryAnswerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FamilyHistoryAnswers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamilyHistoryAnswerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FamilyHistoryAnswers
     * const familyHistoryAnswer = await prisma.familyHistoryAnswer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FamilyHistoryAnswerUpdateManyArgs>(args: SelectSubset<T, FamilyHistoryAnswerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FamilyHistoryAnswer.
     * @param {FamilyHistoryAnswerUpsertArgs} args - Arguments to update or create a FamilyHistoryAnswer.
     * @example
     * // Update or create a FamilyHistoryAnswer
     * const familyHistoryAnswer = await prisma.familyHistoryAnswer.upsert({
     *   create: {
     *     // ... data to create a FamilyHistoryAnswer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FamilyHistoryAnswer we want to update
     *   }
     * })
     */
    upsert<T extends FamilyHistoryAnswerUpsertArgs>(args: SelectSubset<T, FamilyHistoryAnswerUpsertArgs<ExtArgs>>): Prisma__FamilyHistoryAnswerClient<$Result.GetResult<Prisma.$FamilyHistoryAnswerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FamilyHistoryAnswers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamilyHistoryAnswerCountArgs} args - Arguments to filter FamilyHistoryAnswers to count.
     * @example
     * // Count the number of FamilyHistoryAnswers
     * const count = await prisma.familyHistoryAnswer.count({
     *   where: {
     *     // ... the filter for the FamilyHistoryAnswers we want to count
     *   }
     * })
    **/
    count<T extends FamilyHistoryAnswerCountArgs>(
      args?: Subset<T, FamilyHistoryAnswerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FamilyHistoryAnswerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FamilyHistoryAnswer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamilyHistoryAnswerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FamilyHistoryAnswerAggregateArgs>(args: Subset<T, FamilyHistoryAnswerAggregateArgs>): Prisma.PrismaPromise<GetFamilyHistoryAnswerAggregateType<T>>

    /**
     * Group by FamilyHistoryAnswer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamilyHistoryAnswerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FamilyHistoryAnswerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FamilyHistoryAnswerGroupByArgs['orderBy'] }
        : { orderBy?: FamilyHistoryAnswerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FamilyHistoryAnswerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFamilyHistoryAnswerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FamilyHistoryAnswer model
   */
  readonly fields: FamilyHistoryAnswerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FamilyHistoryAnswer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FamilyHistoryAnswerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    question<T extends FamilyHistoryQuestionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FamilyHistoryQuestionDefaultArgs<ExtArgs>>): Prisma__FamilyHistoryQuestionClient<$Result.GetResult<Prisma.$FamilyHistoryQuestionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FamilyHistoryAnswer model
   */ 
  interface FamilyHistoryAnswerFieldRefs {
    readonly id: FieldRef<"FamilyHistoryAnswer", 'Int'>
    readonly userId: FieldRef<"FamilyHistoryAnswer", 'Int'>
    readonly questionId: FieldRef<"FamilyHistoryAnswer", 'Int'>
    readonly answer: FieldRef<"FamilyHistoryAnswer", 'String'>
    readonly details: FieldRef<"FamilyHistoryAnswer", 'String'>
    readonly createdAt: FieldRef<"FamilyHistoryAnswer", 'DateTime'>
    readonly updatedAt: FieldRef<"FamilyHistoryAnswer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FamilyHistoryAnswer findUnique
   */
  export type FamilyHistoryAnswerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamilyHistoryAnswer
     */
    select?: FamilyHistoryAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyHistoryAnswerInclude<ExtArgs> | null
    /**
     * Filter, which FamilyHistoryAnswer to fetch.
     */
    where: FamilyHistoryAnswerWhereUniqueInput
  }

  /**
   * FamilyHistoryAnswer findUniqueOrThrow
   */
  export type FamilyHistoryAnswerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamilyHistoryAnswer
     */
    select?: FamilyHistoryAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyHistoryAnswerInclude<ExtArgs> | null
    /**
     * Filter, which FamilyHistoryAnswer to fetch.
     */
    where: FamilyHistoryAnswerWhereUniqueInput
  }

  /**
   * FamilyHistoryAnswer findFirst
   */
  export type FamilyHistoryAnswerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamilyHistoryAnswer
     */
    select?: FamilyHistoryAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyHistoryAnswerInclude<ExtArgs> | null
    /**
     * Filter, which FamilyHistoryAnswer to fetch.
     */
    where?: FamilyHistoryAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FamilyHistoryAnswers to fetch.
     */
    orderBy?: FamilyHistoryAnswerOrderByWithRelationInput | FamilyHistoryAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FamilyHistoryAnswers.
     */
    cursor?: FamilyHistoryAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FamilyHistoryAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FamilyHistoryAnswers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FamilyHistoryAnswers.
     */
    distinct?: FamilyHistoryAnswerScalarFieldEnum | FamilyHistoryAnswerScalarFieldEnum[]
  }

  /**
   * FamilyHistoryAnswer findFirstOrThrow
   */
  export type FamilyHistoryAnswerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamilyHistoryAnswer
     */
    select?: FamilyHistoryAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyHistoryAnswerInclude<ExtArgs> | null
    /**
     * Filter, which FamilyHistoryAnswer to fetch.
     */
    where?: FamilyHistoryAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FamilyHistoryAnswers to fetch.
     */
    orderBy?: FamilyHistoryAnswerOrderByWithRelationInput | FamilyHistoryAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FamilyHistoryAnswers.
     */
    cursor?: FamilyHistoryAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FamilyHistoryAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FamilyHistoryAnswers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FamilyHistoryAnswers.
     */
    distinct?: FamilyHistoryAnswerScalarFieldEnum | FamilyHistoryAnswerScalarFieldEnum[]
  }

  /**
   * FamilyHistoryAnswer findMany
   */
  export type FamilyHistoryAnswerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamilyHistoryAnswer
     */
    select?: FamilyHistoryAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyHistoryAnswerInclude<ExtArgs> | null
    /**
     * Filter, which FamilyHistoryAnswers to fetch.
     */
    where?: FamilyHistoryAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FamilyHistoryAnswers to fetch.
     */
    orderBy?: FamilyHistoryAnswerOrderByWithRelationInput | FamilyHistoryAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FamilyHistoryAnswers.
     */
    cursor?: FamilyHistoryAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FamilyHistoryAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FamilyHistoryAnswers.
     */
    skip?: number
    distinct?: FamilyHistoryAnswerScalarFieldEnum | FamilyHistoryAnswerScalarFieldEnum[]
  }

  /**
   * FamilyHistoryAnswer create
   */
  export type FamilyHistoryAnswerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamilyHistoryAnswer
     */
    select?: FamilyHistoryAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyHistoryAnswerInclude<ExtArgs> | null
    /**
     * The data needed to create a FamilyHistoryAnswer.
     */
    data: XOR<FamilyHistoryAnswerCreateInput, FamilyHistoryAnswerUncheckedCreateInput>
  }

  /**
   * FamilyHistoryAnswer createMany
   */
  export type FamilyHistoryAnswerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FamilyHistoryAnswers.
     */
    data: FamilyHistoryAnswerCreateManyInput | FamilyHistoryAnswerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FamilyHistoryAnswer update
   */
  export type FamilyHistoryAnswerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamilyHistoryAnswer
     */
    select?: FamilyHistoryAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyHistoryAnswerInclude<ExtArgs> | null
    /**
     * The data needed to update a FamilyHistoryAnswer.
     */
    data: XOR<FamilyHistoryAnswerUpdateInput, FamilyHistoryAnswerUncheckedUpdateInput>
    /**
     * Choose, which FamilyHistoryAnswer to update.
     */
    where: FamilyHistoryAnswerWhereUniqueInput
  }

  /**
   * FamilyHistoryAnswer updateMany
   */
  export type FamilyHistoryAnswerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FamilyHistoryAnswers.
     */
    data: XOR<FamilyHistoryAnswerUpdateManyMutationInput, FamilyHistoryAnswerUncheckedUpdateManyInput>
    /**
     * Filter which FamilyHistoryAnswers to update
     */
    where?: FamilyHistoryAnswerWhereInput
  }

  /**
   * FamilyHistoryAnswer upsert
   */
  export type FamilyHistoryAnswerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamilyHistoryAnswer
     */
    select?: FamilyHistoryAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyHistoryAnswerInclude<ExtArgs> | null
    /**
     * The filter to search for the FamilyHistoryAnswer to update in case it exists.
     */
    where: FamilyHistoryAnswerWhereUniqueInput
    /**
     * In case the FamilyHistoryAnswer found by the `where` argument doesn't exist, create a new FamilyHistoryAnswer with this data.
     */
    create: XOR<FamilyHistoryAnswerCreateInput, FamilyHistoryAnswerUncheckedCreateInput>
    /**
     * In case the FamilyHistoryAnswer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FamilyHistoryAnswerUpdateInput, FamilyHistoryAnswerUncheckedUpdateInput>
  }

  /**
   * FamilyHistoryAnswer delete
   */
  export type FamilyHistoryAnswerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamilyHistoryAnswer
     */
    select?: FamilyHistoryAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyHistoryAnswerInclude<ExtArgs> | null
    /**
     * Filter which FamilyHistoryAnswer to delete.
     */
    where: FamilyHistoryAnswerWhereUniqueInput
  }

  /**
   * FamilyHistoryAnswer deleteMany
   */
  export type FamilyHistoryAnswerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FamilyHistoryAnswers to delete
     */
    where?: FamilyHistoryAnswerWhereInput
  }

  /**
   * FamilyHistoryAnswer without action
   */
  export type FamilyHistoryAnswerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamilyHistoryAnswer
     */
    select?: FamilyHistoryAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyHistoryAnswerInclude<ExtArgs> | null
  }


  /**
   * Model ControlHistoryQuestion
   */

  export type AggregateControlHistoryQuestion = {
    _count: ControlHistoryQuestionCountAggregateOutputType | null
    _avg: ControlHistoryQuestionAvgAggregateOutputType | null
    _sum: ControlHistoryQuestionSumAggregateOutputType | null
    _min: ControlHistoryQuestionMinAggregateOutputType | null
    _max: ControlHistoryQuestionMaxAggregateOutputType | null
  }

  export type ControlHistoryQuestionAvgAggregateOutputType = {
    id: number | null
    order: number | null
  }

  export type ControlHistoryQuestionSumAggregateOutputType = {
    id: number | null
    order: number | null
  }

  export type ControlHistoryQuestionMinAggregateOutputType = {
    id: number | null
    question: string | null
    description: string | null
    isRequired: boolean | null
    order: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ControlHistoryQuestionMaxAggregateOutputType = {
    id: number | null
    question: string | null
    description: string | null
    isRequired: boolean | null
    order: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ControlHistoryQuestionCountAggregateOutputType = {
    id: number
    question: number
    description: number
    isRequired: number
    order: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ControlHistoryQuestionAvgAggregateInputType = {
    id?: true
    order?: true
  }

  export type ControlHistoryQuestionSumAggregateInputType = {
    id?: true
    order?: true
  }

  export type ControlHistoryQuestionMinAggregateInputType = {
    id?: true
    question?: true
    description?: true
    isRequired?: true
    order?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ControlHistoryQuestionMaxAggregateInputType = {
    id?: true
    question?: true
    description?: true
    isRequired?: true
    order?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ControlHistoryQuestionCountAggregateInputType = {
    id?: true
    question?: true
    description?: true
    isRequired?: true
    order?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ControlHistoryQuestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ControlHistoryQuestion to aggregate.
     */
    where?: ControlHistoryQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ControlHistoryQuestions to fetch.
     */
    orderBy?: ControlHistoryQuestionOrderByWithRelationInput | ControlHistoryQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ControlHistoryQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ControlHistoryQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ControlHistoryQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ControlHistoryQuestions
    **/
    _count?: true | ControlHistoryQuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ControlHistoryQuestionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ControlHistoryQuestionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ControlHistoryQuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ControlHistoryQuestionMaxAggregateInputType
  }

  export type GetControlHistoryQuestionAggregateType<T extends ControlHistoryQuestionAggregateArgs> = {
        [P in keyof T & keyof AggregateControlHistoryQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateControlHistoryQuestion[P]>
      : GetScalarType<T[P], AggregateControlHistoryQuestion[P]>
  }




  export type ControlHistoryQuestionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ControlHistoryQuestionWhereInput
    orderBy?: ControlHistoryQuestionOrderByWithAggregationInput | ControlHistoryQuestionOrderByWithAggregationInput[]
    by: ControlHistoryQuestionScalarFieldEnum[] | ControlHistoryQuestionScalarFieldEnum
    having?: ControlHistoryQuestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ControlHistoryQuestionCountAggregateInputType | true
    _avg?: ControlHistoryQuestionAvgAggregateInputType
    _sum?: ControlHistoryQuestionSumAggregateInputType
    _min?: ControlHistoryQuestionMinAggregateInputType
    _max?: ControlHistoryQuestionMaxAggregateInputType
  }

  export type ControlHistoryQuestionGroupByOutputType = {
    id: number
    question: string
    description: string | null
    isRequired: boolean
    order: number
    createdAt: Date
    updatedAt: Date
    _count: ControlHistoryQuestionCountAggregateOutputType | null
    _avg: ControlHistoryQuestionAvgAggregateOutputType | null
    _sum: ControlHistoryQuestionSumAggregateOutputType | null
    _min: ControlHistoryQuestionMinAggregateOutputType | null
    _max: ControlHistoryQuestionMaxAggregateOutputType | null
  }

  type GetControlHistoryQuestionGroupByPayload<T extends ControlHistoryQuestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ControlHistoryQuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ControlHistoryQuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ControlHistoryQuestionGroupByOutputType[P]>
            : GetScalarType<T[P], ControlHistoryQuestionGroupByOutputType[P]>
        }
      >
    >


  export type ControlHistoryQuestionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
    description?: boolean
    isRequired?: boolean
    order?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    answers?: boolean | ControlHistoryQuestion$answersArgs<ExtArgs>
    _count?: boolean | ControlHistoryQuestionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["controlHistoryQuestion"]>


  export type ControlHistoryQuestionSelectScalar = {
    id?: boolean
    question?: boolean
    description?: boolean
    isRequired?: boolean
    order?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ControlHistoryQuestionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    answers?: boolean | ControlHistoryQuestion$answersArgs<ExtArgs>
    _count?: boolean | ControlHistoryQuestionCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ControlHistoryQuestionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ControlHistoryQuestion"
    objects: {
      answers: Prisma.$ControlHistoryAnswerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      question: string
      description: string | null
      isRequired: boolean
      order: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["controlHistoryQuestion"]>
    composites: {}
  }

  type ControlHistoryQuestionGetPayload<S extends boolean | null | undefined | ControlHistoryQuestionDefaultArgs> = $Result.GetResult<Prisma.$ControlHistoryQuestionPayload, S>

  type ControlHistoryQuestionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ControlHistoryQuestionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ControlHistoryQuestionCountAggregateInputType | true
    }

  export interface ControlHistoryQuestionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ControlHistoryQuestion'], meta: { name: 'ControlHistoryQuestion' } }
    /**
     * Find zero or one ControlHistoryQuestion that matches the filter.
     * @param {ControlHistoryQuestionFindUniqueArgs} args - Arguments to find a ControlHistoryQuestion
     * @example
     * // Get one ControlHistoryQuestion
     * const controlHistoryQuestion = await prisma.controlHistoryQuestion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ControlHistoryQuestionFindUniqueArgs>(args: SelectSubset<T, ControlHistoryQuestionFindUniqueArgs<ExtArgs>>): Prisma__ControlHistoryQuestionClient<$Result.GetResult<Prisma.$ControlHistoryQuestionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ControlHistoryQuestion that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ControlHistoryQuestionFindUniqueOrThrowArgs} args - Arguments to find a ControlHistoryQuestion
     * @example
     * // Get one ControlHistoryQuestion
     * const controlHistoryQuestion = await prisma.controlHistoryQuestion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ControlHistoryQuestionFindUniqueOrThrowArgs>(args: SelectSubset<T, ControlHistoryQuestionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ControlHistoryQuestionClient<$Result.GetResult<Prisma.$ControlHistoryQuestionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ControlHistoryQuestion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControlHistoryQuestionFindFirstArgs} args - Arguments to find a ControlHistoryQuestion
     * @example
     * // Get one ControlHistoryQuestion
     * const controlHistoryQuestion = await prisma.controlHistoryQuestion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ControlHistoryQuestionFindFirstArgs>(args?: SelectSubset<T, ControlHistoryQuestionFindFirstArgs<ExtArgs>>): Prisma__ControlHistoryQuestionClient<$Result.GetResult<Prisma.$ControlHistoryQuestionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ControlHistoryQuestion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControlHistoryQuestionFindFirstOrThrowArgs} args - Arguments to find a ControlHistoryQuestion
     * @example
     * // Get one ControlHistoryQuestion
     * const controlHistoryQuestion = await prisma.controlHistoryQuestion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ControlHistoryQuestionFindFirstOrThrowArgs>(args?: SelectSubset<T, ControlHistoryQuestionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ControlHistoryQuestionClient<$Result.GetResult<Prisma.$ControlHistoryQuestionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ControlHistoryQuestions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControlHistoryQuestionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ControlHistoryQuestions
     * const controlHistoryQuestions = await prisma.controlHistoryQuestion.findMany()
     * 
     * // Get first 10 ControlHistoryQuestions
     * const controlHistoryQuestions = await prisma.controlHistoryQuestion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const controlHistoryQuestionWithIdOnly = await prisma.controlHistoryQuestion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ControlHistoryQuestionFindManyArgs>(args?: SelectSubset<T, ControlHistoryQuestionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ControlHistoryQuestionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ControlHistoryQuestion.
     * @param {ControlHistoryQuestionCreateArgs} args - Arguments to create a ControlHistoryQuestion.
     * @example
     * // Create one ControlHistoryQuestion
     * const ControlHistoryQuestion = await prisma.controlHistoryQuestion.create({
     *   data: {
     *     // ... data to create a ControlHistoryQuestion
     *   }
     * })
     * 
     */
    create<T extends ControlHistoryQuestionCreateArgs>(args: SelectSubset<T, ControlHistoryQuestionCreateArgs<ExtArgs>>): Prisma__ControlHistoryQuestionClient<$Result.GetResult<Prisma.$ControlHistoryQuestionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ControlHistoryQuestions.
     * @param {ControlHistoryQuestionCreateManyArgs} args - Arguments to create many ControlHistoryQuestions.
     * @example
     * // Create many ControlHistoryQuestions
     * const controlHistoryQuestion = await prisma.controlHistoryQuestion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ControlHistoryQuestionCreateManyArgs>(args?: SelectSubset<T, ControlHistoryQuestionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ControlHistoryQuestion.
     * @param {ControlHistoryQuestionDeleteArgs} args - Arguments to delete one ControlHistoryQuestion.
     * @example
     * // Delete one ControlHistoryQuestion
     * const ControlHistoryQuestion = await prisma.controlHistoryQuestion.delete({
     *   where: {
     *     // ... filter to delete one ControlHistoryQuestion
     *   }
     * })
     * 
     */
    delete<T extends ControlHistoryQuestionDeleteArgs>(args: SelectSubset<T, ControlHistoryQuestionDeleteArgs<ExtArgs>>): Prisma__ControlHistoryQuestionClient<$Result.GetResult<Prisma.$ControlHistoryQuestionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ControlHistoryQuestion.
     * @param {ControlHistoryQuestionUpdateArgs} args - Arguments to update one ControlHistoryQuestion.
     * @example
     * // Update one ControlHistoryQuestion
     * const controlHistoryQuestion = await prisma.controlHistoryQuestion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ControlHistoryQuestionUpdateArgs>(args: SelectSubset<T, ControlHistoryQuestionUpdateArgs<ExtArgs>>): Prisma__ControlHistoryQuestionClient<$Result.GetResult<Prisma.$ControlHistoryQuestionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ControlHistoryQuestions.
     * @param {ControlHistoryQuestionDeleteManyArgs} args - Arguments to filter ControlHistoryQuestions to delete.
     * @example
     * // Delete a few ControlHistoryQuestions
     * const { count } = await prisma.controlHistoryQuestion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ControlHistoryQuestionDeleteManyArgs>(args?: SelectSubset<T, ControlHistoryQuestionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ControlHistoryQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControlHistoryQuestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ControlHistoryQuestions
     * const controlHistoryQuestion = await prisma.controlHistoryQuestion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ControlHistoryQuestionUpdateManyArgs>(args: SelectSubset<T, ControlHistoryQuestionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ControlHistoryQuestion.
     * @param {ControlHistoryQuestionUpsertArgs} args - Arguments to update or create a ControlHistoryQuestion.
     * @example
     * // Update or create a ControlHistoryQuestion
     * const controlHistoryQuestion = await prisma.controlHistoryQuestion.upsert({
     *   create: {
     *     // ... data to create a ControlHistoryQuestion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ControlHistoryQuestion we want to update
     *   }
     * })
     */
    upsert<T extends ControlHistoryQuestionUpsertArgs>(args: SelectSubset<T, ControlHistoryQuestionUpsertArgs<ExtArgs>>): Prisma__ControlHistoryQuestionClient<$Result.GetResult<Prisma.$ControlHistoryQuestionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ControlHistoryQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControlHistoryQuestionCountArgs} args - Arguments to filter ControlHistoryQuestions to count.
     * @example
     * // Count the number of ControlHistoryQuestions
     * const count = await prisma.controlHistoryQuestion.count({
     *   where: {
     *     // ... the filter for the ControlHistoryQuestions we want to count
     *   }
     * })
    **/
    count<T extends ControlHistoryQuestionCountArgs>(
      args?: Subset<T, ControlHistoryQuestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ControlHistoryQuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ControlHistoryQuestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControlHistoryQuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ControlHistoryQuestionAggregateArgs>(args: Subset<T, ControlHistoryQuestionAggregateArgs>): Prisma.PrismaPromise<GetControlHistoryQuestionAggregateType<T>>

    /**
     * Group by ControlHistoryQuestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControlHistoryQuestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ControlHistoryQuestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ControlHistoryQuestionGroupByArgs['orderBy'] }
        : { orderBy?: ControlHistoryQuestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ControlHistoryQuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetControlHistoryQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ControlHistoryQuestion model
   */
  readonly fields: ControlHistoryQuestionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ControlHistoryQuestion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ControlHistoryQuestionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    answers<T extends ControlHistoryQuestion$answersArgs<ExtArgs> = {}>(args?: Subset<T, ControlHistoryQuestion$answersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ControlHistoryAnswerPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ControlHistoryQuestion model
   */ 
  interface ControlHistoryQuestionFieldRefs {
    readonly id: FieldRef<"ControlHistoryQuestion", 'Int'>
    readonly question: FieldRef<"ControlHistoryQuestion", 'String'>
    readonly description: FieldRef<"ControlHistoryQuestion", 'String'>
    readonly isRequired: FieldRef<"ControlHistoryQuestion", 'Boolean'>
    readonly order: FieldRef<"ControlHistoryQuestion", 'Int'>
    readonly createdAt: FieldRef<"ControlHistoryQuestion", 'DateTime'>
    readonly updatedAt: FieldRef<"ControlHistoryQuestion", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ControlHistoryQuestion findUnique
   */
  export type ControlHistoryQuestionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ControlHistoryQuestion
     */
    select?: ControlHistoryQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlHistoryQuestionInclude<ExtArgs> | null
    /**
     * Filter, which ControlHistoryQuestion to fetch.
     */
    where: ControlHistoryQuestionWhereUniqueInput
  }

  /**
   * ControlHistoryQuestion findUniqueOrThrow
   */
  export type ControlHistoryQuestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ControlHistoryQuestion
     */
    select?: ControlHistoryQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlHistoryQuestionInclude<ExtArgs> | null
    /**
     * Filter, which ControlHistoryQuestion to fetch.
     */
    where: ControlHistoryQuestionWhereUniqueInput
  }

  /**
   * ControlHistoryQuestion findFirst
   */
  export type ControlHistoryQuestionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ControlHistoryQuestion
     */
    select?: ControlHistoryQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlHistoryQuestionInclude<ExtArgs> | null
    /**
     * Filter, which ControlHistoryQuestion to fetch.
     */
    where?: ControlHistoryQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ControlHistoryQuestions to fetch.
     */
    orderBy?: ControlHistoryQuestionOrderByWithRelationInput | ControlHistoryQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ControlHistoryQuestions.
     */
    cursor?: ControlHistoryQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ControlHistoryQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ControlHistoryQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ControlHistoryQuestions.
     */
    distinct?: ControlHistoryQuestionScalarFieldEnum | ControlHistoryQuestionScalarFieldEnum[]
  }

  /**
   * ControlHistoryQuestion findFirstOrThrow
   */
  export type ControlHistoryQuestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ControlHistoryQuestion
     */
    select?: ControlHistoryQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlHistoryQuestionInclude<ExtArgs> | null
    /**
     * Filter, which ControlHistoryQuestion to fetch.
     */
    where?: ControlHistoryQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ControlHistoryQuestions to fetch.
     */
    orderBy?: ControlHistoryQuestionOrderByWithRelationInput | ControlHistoryQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ControlHistoryQuestions.
     */
    cursor?: ControlHistoryQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ControlHistoryQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ControlHistoryQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ControlHistoryQuestions.
     */
    distinct?: ControlHistoryQuestionScalarFieldEnum | ControlHistoryQuestionScalarFieldEnum[]
  }

  /**
   * ControlHistoryQuestion findMany
   */
  export type ControlHistoryQuestionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ControlHistoryQuestion
     */
    select?: ControlHistoryQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlHistoryQuestionInclude<ExtArgs> | null
    /**
     * Filter, which ControlHistoryQuestions to fetch.
     */
    where?: ControlHistoryQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ControlHistoryQuestions to fetch.
     */
    orderBy?: ControlHistoryQuestionOrderByWithRelationInput | ControlHistoryQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ControlHistoryQuestions.
     */
    cursor?: ControlHistoryQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ControlHistoryQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ControlHistoryQuestions.
     */
    skip?: number
    distinct?: ControlHistoryQuestionScalarFieldEnum | ControlHistoryQuestionScalarFieldEnum[]
  }

  /**
   * ControlHistoryQuestion create
   */
  export type ControlHistoryQuestionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ControlHistoryQuestion
     */
    select?: ControlHistoryQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlHistoryQuestionInclude<ExtArgs> | null
    /**
     * The data needed to create a ControlHistoryQuestion.
     */
    data: XOR<ControlHistoryQuestionCreateInput, ControlHistoryQuestionUncheckedCreateInput>
  }

  /**
   * ControlHistoryQuestion createMany
   */
  export type ControlHistoryQuestionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ControlHistoryQuestions.
     */
    data: ControlHistoryQuestionCreateManyInput | ControlHistoryQuestionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ControlHistoryQuestion update
   */
  export type ControlHistoryQuestionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ControlHistoryQuestion
     */
    select?: ControlHistoryQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlHistoryQuestionInclude<ExtArgs> | null
    /**
     * The data needed to update a ControlHistoryQuestion.
     */
    data: XOR<ControlHistoryQuestionUpdateInput, ControlHistoryQuestionUncheckedUpdateInput>
    /**
     * Choose, which ControlHistoryQuestion to update.
     */
    where: ControlHistoryQuestionWhereUniqueInput
  }

  /**
   * ControlHistoryQuestion updateMany
   */
  export type ControlHistoryQuestionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ControlHistoryQuestions.
     */
    data: XOR<ControlHistoryQuestionUpdateManyMutationInput, ControlHistoryQuestionUncheckedUpdateManyInput>
    /**
     * Filter which ControlHistoryQuestions to update
     */
    where?: ControlHistoryQuestionWhereInput
  }

  /**
   * ControlHistoryQuestion upsert
   */
  export type ControlHistoryQuestionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ControlHistoryQuestion
     */
    select?: ControlHistoryQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlHistoryQuestionInclude<ExtArgs> | null
    /**
     * The filter to search for the ControlHistoryQuestion to update in case it exists.
     */
    where: ControlHistoryQuestionWhereUniqueInput
    /**
     * In case the ControlHistoryQuestion found by the `where` argument doesn't exist, create a new ControlHistoryQuestion with this data.
     */
    create: XOR<ControlHistoryQuestionCreateInput, ControlHistoryQuestionUncheckedCreateInput>
    /**
     * In case the ControlHistoryQuestion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ControlHistoryQuestionUpdateInput, ControlHistoryQuestionUncheckedUpdateInput>
  }

  /**
   * ControlHistoryQuestion delete
   */
  export type ControlHistoryQuestionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ControlHistoryQuestion
     */
    select?: ControlHistoryQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlHistoryQuestionInclude<ExtArgs> | null
    /**
     * Filter which ControlHistoryQuestion to delete.
     */
    where: ControlHistoryQuestionWhereUniqueInput
  }

  /**
   * ControlHistoryQuestion deleteMany
   */
  export type ControlHistoryQuestionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ControlHistoryQuestions to delete
     */
    where?: ControlHistoryQuestionWhereInput
  }

  /**
   * ControlHistoryQuestion.answers
   */
  export type ControlHistoryQuestion$answersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ControlHistoryAnswer
     */
    select?: ControlHistoryAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlHistoryAnswerInclude<ExtArgs> | null
    where?: ControlHistoryAnswerWhereInput
    orderBy?: ControlHistoryAnswerOrderByWithRelationInput | ControlHistoryAnswerOrderByWithRelationInput[]
    cursor?: ControlHistoryAnswerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ControlHistoryAnswerScalarFieldEnum | ControlHistoryAnswerScalarFieldEnum[]
  }

  /**
   * ControlHistoryQuestion without action
   */
  export type ControlHistoryQuestionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ControlHistoryQuestion
     */
    select?: ControlHistoryQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlHistoryQuestionInclude<ExtArgs> | null
  }


  /**
   * Model ControlHistoryAnswer
   */

  export type AggregateControlHistoryAnswer = {
    _count: ControlHistoryAnswerCountAggregateOutputType | null
    _avg: ControlHistoryAnswerAvgAggregateOutputType | null
    _sum: ControlHistoryAnswerSumAggregateOutputType | null
    _min: ControlHistoryAnswerMinAggregateOutputType | null
    _max: ControlHistoryAnswerMaxAggregateOutputType | null
  }

  export type ControlHistoryAnswerAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    questionId: number | null
  }

  export type ControlHistoryAnswerSumAggregateOutputType = {
    id: number | null
    userId: number | null
    questionId: number | null
  }

  export type ControlHistoryAnswerMinAggregateOutputType = {
    id: number | null
    userId: number | null
    questionId: number | null
    date: Date | null
    details: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ControlHistoryAnswerMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    questionId: number | null
    date: Date | null
    details: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ControlHistoryAnswerCountAggregateOutputType = {
    id: number
    userId: number
    questionId: number
    date: number
    details: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ControlHistoryAnswerAvgAggregateInputType = {
    id?: true
    userId?: true
    questionId?: true
  }

  export type ControlHistoryAnswerSumAggregateInputType = {
    id?: true
    userId?: true
    questionId?: true
  }

  export type ControlHistoryAnswerMinAggregateInputType = {
    id?: true
    userId?: true
    questionId?: true
    date?: true
    details?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ControlHistoryAnswerMaxAggregateInputType = {
    id?: true
    userId?: true
    questionId?: true
    date?: true
    details?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ControlHistoryAnswerCountAggregateInputType = {
    id?: true
    userId?: true
    questionId?: true
    date?: true
    details?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ControlHistoryAnswerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ControlHistoryAnswer to aggregate.
     */
    where?: ControlHistoryAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ControlHistoryAnswers to fetch.
     */
    orderBy?: ControlHistoryAnswerOrderByWithRelationInput | ControlHistoryAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ControlHistoryAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ControlHistoryAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ControlHistoryAnswers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ControlHistoryAnswers
    **/
    _count?: true | ControlHistoryAnswerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ControlHistoryAnswerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ControlHistoryAnswerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ControlHistoryAnswerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ControlHistoryAnswerMaxAggregateInputType
  }

  export type GetControlHistoryAnswerAggregateType<T extends ControlHistoryAnswerAggregateArgs> = {
        [P in keyof T & keyof AggregateControlHistoryAnswer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateControlHistoryAnswer[P]>
      : GetScalarType<T[P], AggregateControlHistoryAnswer[P]>
  }




  export type ControlHistoryAnswerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ControlHistoryAnswerWhereInput
    orderBy?: ControlHistoryAnswerOrderByWithAggregationInput | ControlHistoryAnswerOrderByWithAggregationInput[]
    by: ControlHistoryAnswerScalarFieldEnum[] | ControlHistoryAnswerScalarFieldEnum
    having?: ControlHistoryAnswerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ControlHistoryAnswerCountAggregateInputType | true
    _avg?: ControlHistoryAnswerAvgAggregateInputType
    _sum?: ControlHistoryAnswerSumAggregateInputType
    _min?: ControlHistoryAnswerMinAggregateInputType
    _max?: ControlHistoryAnswerMaxAggregateInputType
  }

  export type ControlHistoryAnswerGroupByOutputType = {
    id: number
    userId: number
    questionId: number
    date: Date
    details: string | null
    createdAt: Date
    updatedAt: Date
    _count: ControlHistoryAnswerCountAggregateOutputType | null
    _avg: ControlHistoryAnswerAvgAggregateOutputType | null
    _sum: ControlHistoryAnswerSumAggregateOutputType | null
    _min: ControlHistoryAnswerMinAggregateOutputType | null
    _max: ControlHistoryAnswerMaxAggregateOutputType | null
  }

  type GetControlHistoryAnswerGroupByPayload<T extends ControlHistoryAnswerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ControlHistoryAnswerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ControlHistoryAnswerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ControlHistoryAnswerGroupByOutputType[P]>
            : GetScalarType<T[P], ControlHistoryAnswerGroupByOutputType[P]>
        }
      >
    >


  export type ControlHistoryAnswerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    questionId?: boolean
    date?: boolean
    details?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    question?: boolean | ControlHistoryQuestionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["controlHistoryAnswer"]>


  export type ControlHistoryAnswerSelectScalar = {
    id?: boolean
    userId?: boolean
    questionId?: boolean
    date?: boolean
    details?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ControlHistoryAnswerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    question?: boolean | ControlHistoryQuestionDefaultArgs<ExtArgs>
  }

  export type $ControlHistoryAnswerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ControlHistoryAnswer"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      question: Prisma.$ControlHistoryQuestionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      questionId: number
      date: Date
      details: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["controlHistoryAnswer"]>
    composites: {}
  }

  type ControlHistoryAnswerGetPayload<S extends boolean | null | undefined | ControlHistoryAnswerDefaultArgs> = $Result.GetResult<Prisma.$ControlHistoryAnswerPayload, S>

  type ControlHistoryAnswerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ControlHistoryAnswerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ControlHistoryAnswerCountAggregateInputType | true
    }

  export interface ControlHistoryAnswerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ControlHistoryAnswer'], meta: { name: 'ControlHistoryAnswer' } }
    /**
     * Find zero or one ControlHistoryAnswer that matches the filter.
     * @param {ControlHistoryAnswerFindUniqueArgs} args - Arguments to find a ControlHistoryAnswer
     * @example
     * // Get one ControlHistoryAnswer
     * const controlHistoryAnswer = await prisma.controlHistoryAnswer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ControlHistoryAnswerFindUniqueArgs>(args: SelectSubset<T, ControlHistoryAnswerFindUniqueArgs<ExtArgs>>): Prisma__ControlHistoryAnswerClient<$Result.GetResult<Prisma.$ControlHistoryAnswerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ControlHistoryAnswer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ControlHistoryAnswerFindUniqueOrThrowArgs} args - Arguments to find a ControlHistoryAnswer
     * @example
     * // Get one ControlHistoryAnswer
     * const controlHistoryAnswer = await prisma.controlHistoryAnswer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ControlHistoryAnswerFindUniqueOrThrowArgs>(args: SelectSubset<T, ControlHistoryAnswerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ControlHistoryAnswerClient<$Result.GetResult<Prisma.$ControlHistoryAnswerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ControlHistoryAnswer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControlHistoryAnswerFindFirstArgs} args - Arguments to find a ControlHistoryAnswer
     * @example
     * // Get one ControlHistoryAnswer
     * const controlHistoryAnswer = await prisma.controlHistoryAnswer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ControlHistoryAnswerFindFirstArgs>(args?: SelectSubset<T, ControlHistoryAnswerFindFirstArgs<ExtArgs>>): Prisma__ControlHistoryAnswerClient<$Result.GetResult<Prisma.$ControlHistoryAnswerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ControlHistoryAnswer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControlHistoryAnswerFindFirstOrThrowArgs} args - Arguments to find a ControlHistoryAnswer
     * @example
     * // Get one ControlHistoryAnswer
     * const controlHistoryAnswer = await prisma.controlHistoryAnswer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ControlHistoryAnswerFindFirstOrThrowArgs>(args?: SelectSubset<T, ControlHistoryAnswerFindFirstOrThrowArgs<ExtArgs>>): Prisma__ControlHistoryAnswerClient<$Result.GetResult<Prisma.$ControlHistoryAnswerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ControlHistoryAnswers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControlHistoryAnswerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ControlHistoryAnswers
     * const controlHistoryAnswers = await prisma.controlHistoryAnswer.findMany()
     * 
     * // Get first 10 ControlHistoryAnswers
     * const controlHistoryAnswers = await prisma.controlHistoryAnswer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const controlHistoryAnswerWithIdOnly = await prisma.controlHistoryAnswer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ControlHistoryAnswerFindManyArgs>(args?: SelectSubset<T, ControlHistoryAnswerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ControlHistoryAnswerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ControlHistoryAnswer.
     * @param {ControlHistoryAnswerCreateArgs} args - Arguments to create a ControlHistoryAnswer.
     * @example
     * // Create one ControlHistoryAnswer
     * const ControlHistoryAnswer = await prisma.controlHistoryAnswer.create({
     *   data: {
     *     // ... data to create a ControlHistoryAnswer
     *   }
     * })
     * 
     */
    create<T extends ControlHistoryAnswerCreateArgs>(args: SelectSubset<T, ControlHistoryAnswerCreateArgs<ExtArgs>>): Prisma__ControlHistoryAnswerClient<$Result.GetResult<Prisma.$ControlHistoryAnswerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ControlHistoryAnswers.
     * @param {ControlHistoryAnswerCreateManyArgs} args - Arguments to create many ControlHistoryAnswers.
     * @example
     * // Create many ControlHistoryAnswers
     * const controlHistoryAnswer = await prisma.controlHistoryAnswer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ControlHistoryAnswerCreateManyArgs>(args?: SelectSubset<T, ControlHistoryAnswerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ControlHistoryAnswer.
     * @param {ControlHistoryAnswerDeleteArgs} args - Arguments to delete one ControlHistoryAnswer.
     * @example
     * // Delete one ControlHistoryAnswer
     * const ControlHistoryAnswer = await prisma.controlHistoryAnswer.delete({
     *   where: {
     *     // ... filter to delete one ControlHistoryAnswer
     *   }
     * })
     * 
     */
    delete<T extends ControlHistoryAnswerDeleteArgs>(args: SelectSubset<T, ControlHistoryAnswerDeleteArgs<ExtArgs>>): Prisma__ControlHistoryAnswerClient<$Result.GetResult<Prisma.$ControlHistoryAnswerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ControlHistoryAnswer.
     * @param {ControlHistoryAnswerUpdateArgs} args - Arguments to update one ControlHistoryAnswer.
     * @example
     * // Update one ControlHistoryAnswer
     * const controlHistoryAnswer = await prisma.controlHistoryAnswer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ControlHistoryAnswerUpdateArgs>(args: SelectSubset<T, ControlHistoryAnswerUpdateArgs<ExtArgs>>): Prisma__ControlHistoryAnswerClient<$Result.GetResult<Prisma.$ControlHistoryAnswerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ControlHistoryAnswers.
     * @param {ControlHistoryAnswerDeleteManyArgs} args - Arguments to filter ControlHistoryAnswers to delete.
     * @example
     * // Delete a few ControlHistoryAnswers
     * const { count } = await prisma.controlHistoryAnswer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ControlHistoryAnswerDeleteManyArgs>(args?: SelectSubset<T, ControlHistoryAnswerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ControlHistoryAnswers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControlHistoryAnswerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ControlHistoryAnswers
     * const controlHistoryAnswer = await prisma.controlHistoryAnswer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ControlHistoryAnswerUpdateManyArgs>(args: SelectSubset<T, ControlHistoryAnswerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ControlHistoryAnswer.
     * @param {ControlHistoryAnswerUpsertArgs} args - Arguments to update or create a ControlHistoryAnswer.
     * @example
     * // Update or create a ControlHistoryAnswer
     * const controlHistoryAnswer = await prisma.controlHistoryAnswer.upsert({
     *   create: {
     *     // ... data to create a ControlHistoryAnswer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ControlHistoryAnswer we want to update
     *   }
     * })
     */
    upsert<T extends ControlHistoryAnswerUpsertArgs>(args: SelectSubset<T, ControlHistoryAnswerUpsertArgs<ExtArgs>>): Prisma__ControlHistoryAnswerClient<$Result.GetResult<Prisma.$ControlHistoryAnswerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ControlHistoryAnswers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControlHistoryAnswerCountArgs} args - Arguments to filter ControlHistoryAnswers to count.
     * @example
     * // Count the number of ControlHistoryAnswers
     * const count = await prisma.controlHistoryAnswer.count({
     *   where: {
     *     // ... the filter for the ControlHistoryAnswers we want to count
     *   }
     * })
    **/
    count<T extends ControlHistoryAnswerCountArgs>(
      args?: Subset<T, ControlHistoryAnswerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ControlHistoryAnswerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ControlHistoryAnswer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControlHistoryAnswerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ControlHistoryAnswerAggregateArgs>(args: Subset<T, ControlHistoryAnswerAggregateArgs>): Prisma.PrismaPromise<GetControlHistoryAnswerAggregateType<T>>

    /**
     * Group by ControlHistoryAnswer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControlHistoryAnswerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ControlHistoryAnswerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ControlHistoryAnswerGroupByArgs['orderBy'] }
        : { orderBy?: ControlHistoryAnswerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ControlHistoryAnswerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetControlHistoryAnswerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ControlHistoryAnswer model
   */
  readonly fields: ControlHistoryAnswerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ControlHistoryAnswer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ControlHistoryAnswerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    question<T extends ControlHistoryQuestionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ControlHistoryQuestionDefaultArgs<ExtArgs>>): Prisma__ControlHistoryQuestionClient<$Result.GetResult<Prisma.$ControlHistoryQuestionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ControlHistoryAnswer model
   */ 
  interface ControlHistoryAnswerFieldRefs {
    readonly id: FieldRef<"ControlHistoryAnswer", 'Int'>
    readonly userId: FieldRef<"ControlHistoryAnswer", 'Int'>
    readonly questionId: FieldRef<"ControlHistoryAnswer", 'Int'>
    readonly date: FieldRef<"ControlHistoryAnswer", 'DateTime'>
    readonly details: FieldRef<"ControlHistoryAnswer", 'String'>
    readonly createdAt: FieldRef<"ControlHistoryAnswer", 'DateTime'>
    readonly updatedAt: FieldRef<"ControlHistoryAnswer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ControlHistoryAnswer findUnique
   */
  export type ControlHistoryAnswerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ControlHistoryAnswer
     */
    select?: ControlHistoryAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlHistoryAnswerInclude<ExtArgs> | null
    /**
     * Filter, which ControlHistoryAnswer to fetch.
     */
    where: ControlHistoryAnswerWhereUniqueInput
  }

  /**
   * ControlHistoryAnswer findUniqueOrThrow
   */
  export type ControlHistoryAnswerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ControlHistoryAnswer
     */
    select?: ControlHistoryAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlHistoryAnswerInclude<ExtArgs> | null
    /**
     * Filter, which ControlHistoryAnswer to fetch.
     */
    where: ControlHistoryAnswerWhereUniqueInput
  }

  /**
   * ControlHistoryAnswer findFirst
   */
  export type ControlHistoryAnswerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ControlHistoryAnswer
     */
    select?: ControlHistoryAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlHistoryAnswerInclude<ExtArgs> | null
    /**
     * Filter, which ControlHistoryAnswer to fetch.
     */
    where?: ControlHistoryAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ControlHistoryAnswers to fetch.
     */
    orderBy?: ControlHistoryAnswerOrderByWithRelationInput | ControlHistoryAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ControlHistoryAnswers.
     */
    cursor?: ControlHistoryAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ControlHistoryAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ControlHistoryAnswers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ControlHistoryAnswers.
     */
    distinct?: ControlHistoryAnswerScalarFieldEnum | ControlHistoryAnswerScalarFieldEnum[]
  }

  /**
   * ControlHistoryAnswer findFirstOrThrow
   */
  export type ControlHistoryAnswerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ControlHistoryAnswer
     */
    select?: ControlHistoryAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlHistoryAnswerInclude<ExtArgs> | null
    /**
     * Filter, which ControlHistoryAnswer to fetch.
     */
    where?: ControlHistoryAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ControlHistoryAnswers to fetch.
     */
    orderBy?: ControlHistoryAnswerOrderByWithRelationInput | ControlHistoryAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ControlHistoryAnswers.
     */
    cursor?: ControlHistoryAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ControlHistoryAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ControlHistoryAnswers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ControlHistoryAnswers.
     */
    distinct?: ControlHistoryAnswerScalarFieldEnum | ControlHistoryAnswerScalarFieldEnum[]
  }

  /**
   * ControlHistoryAnswer findMany
   */
  export type ControlHistoryAnswerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ControlHistoryAnswer
     */
    select?: ControlHistoryAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlHistoryAnswerInclude<ExtArgs> | null
    /**
     * Filter, which ControlHistoryAnswers to fetch.
     */
    where?: ControlHistoryAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ControlHistoryAnswers to fetch.
     */
    orderBy?: ControlHistoryAnswerOrderByWithRelationInput | ControlHistoryAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ControlHistoryAnswers.
     */
    cursor?: ControlHistoryAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ControlHistoryAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ControlHistoryAnswers.
     */
    skip?: number
    distinct?: ControlHistoryAnswerScalarFieldEnum | ControlHistoryAnswerScalarFieldEnum[]
  }

  /**
   * ControlHistoryAnswer create
   */
  export type ControlHistoryAnswerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ControlHistoryAnswer
     */
    select?: ControlHistoryAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlHistoryAnswerInclude<ExtArgs> | null
    /**
     * The data needed to create a ControlHistoryAnswer.
     */
    data: XOR<ControlHistoryAnswerCreateInput, ControlHistoryAnswerUncheckedCreateInput>
  }

  /**
   * ControlHistoryAnswer createMany
   */
  export type ControlHistoryAnswerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ControlHistoryAnswers.
     */
    data: ControlHistoryAnswerCreateManyInput | ControlHistoryAnswerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ControlHistoryAnswer update
   */
  export type ControlHistoryAnswerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ControlHistoryAnswer
     */
    select?: ControlHistoryAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlHistoryAnswerInclude<ExtArgs> | null
    /**
     * The data needed to update a ControlHistoryAnswer.
     */
    data: XOR<ControlHistoryAnswerUpdateInput, ControlHistoryAnswerUncheckedUpdateInput>
    /**
     * Choose, which ControlHistoryAnswer to update.
     */
    where: ControlHistoryAnswerWhereUniqueInput
  }

  /**
   * ControlHistoryAnswer updateMany
   */
  export type ControlHistoryAnswerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ControlHistoryAnswers.
     */
    data: XOR<ControlHistoryAnswerUpdateManyMutationInput, ControlHistoryAnswerUncheckedUpdateManyInput>
    /**
     * Filter which ControlHistoryAnswers to update
     */
    where?: ControlHistoryAnswerWhereInput
  }

  /**
   * ControlHistoryAnswer upsert
   */
  export type ControlHistoryAnswerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ControlHistoryAnswer
     */
    select?: ControlHistoryAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlHistoryAnswerInclude<ExtArgs> | null
    /**
     * The filter to search for the ControlHistoryAnswer to update in case it exists.
     */
    where: ControlHistoryAnswerWhereUniqueInput
    /**
     * In case the ControlHistoryAnswer found by the `where` argument doesn't exist, create a new ControlHistoryAnswer with this data.
     */
    create: XOR<ControlHistoryAnswerCreateInput, ControlHistoryAnswerUncheckedCreateInput>
    /**
     * In case the ControlHistoryAnswer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ControlHistoryAnswerUpdateInput, ControlHistoryAnswerUncheckedUpdateInput>
  }

  /**
   * ControlHistoryAnswer delete
   */
  export type ControlHistoryAnswerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ControlHistoryAnswer
     */
    select?: ControlHistoryAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlHistoryAnswerInclude<ExtArgs> | null
    /**
     * Filter which ControlHistoryAnswer to delete.
     */
    where: ControlHistoryAnswerWhereUniqueInput
  }

  /**
   * ControlHistoryAnswer deleteMany
   */
  export type ControlHistoryAnswerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ControlHistoryAnswers to delete
     */
    where?: ControlHistoryAnswerWhereInput
  }

  /**
   * ControlHistoryAnswer without action
   */
  export type ControlHistoryAnswerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ControlHistoryAnswer
     */
    select?: ControlHistoryAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlHistoryAnswerInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    role: 'role',
    phone: 'phone',
    birthDate: 'birthDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    profile: 'profile'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ProfileConfigScalarFieldEnum: {
    id: 'id',
    fieldName: 'fieldName',
    displayName: 'displayName',
    isRequired: 'isRequired',
    fieldType: 'fieldType',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProfileConfigScalarFieldEnum = (typeof ProfileConfigScalarFieldEnum)[keyof typeof ProfileConfigScalarFieldEnum]


  export const ProfileFieldScalarFieldEnum: {
    id: 'id',
    name: 'name',
    label: 'label',
    type: 'type',
    required: 'required',
    order: 'order',
    options: 'options',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProfileFieldScalarFieldEnum = (typeof ProfileFieldScalarFieldEnum)[keyof typeof ProfileFieldScalarFieldEnum]


  export const FamilyHistoryQuestionScalarFieldEnum: {
    id: 'id',
    question: 'question',
    description: 'description',
    isRequired: 'isRequired',
    answerType: 'answerType',
    options: 'options',
    allowMultiple: 'allowMultiple',
    order: 'order',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FamilyHistoryQuestionScalarFieldEnum = (typeof FamilyHistoryQuestionScalarFieldEnum)[keyof typeof FamilyHistoryQuestionScalarFieldEnum]


  export const FamilyHistoryAnswerScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    questionId: 'questionId',
    answer: 'answer',
    details: 'details',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FamilyHistoryAnswerScalarFieldEnum = (typeof FamilyHistoryAnswerScalarFieldEnum)[keyof typeof FamilyHistoryAnswerScalarFieldEnum]


  export const ControlHistoryQuestionScalarFieldEnum: {
    id: 'id',
    question: 'question',
    description: 'description',
    isRequired: 'isRequired',
    order: 'order',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ControlHistoryQuestionScalarFieldEnum = (typeof ControlHistoryQuestionScalarFieldEnum)[keyof typeof ControlHistoryQuestionScalarFieldEnum]


  export const ControlHistoryAnswerScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    questionId: 'questionId',
    date: 'date',
    details: 'details',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ControlHistoryAnswerScalarFieldEnum = (typeof ControlHistoryAnswerScalarFieldEnum)[keyof typeof ControlHistoryAnswerScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'FieldType'
   */
  export type EnumFieldTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FieldType'>
    


  /**
   * Reference to a field of type 'AnswerType'
   */
  export type EnumAnswerTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AnswerType'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    phone?: StringNullableFilter<"User"> | string | null
    birthDate?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    profile?: JsonNullableFilter<"User">
    familyHistoryAnswers?: FamilyHistoryAnswerListRelationFilter
    controlHistoryAnswers?: ControlHistoryAnswerListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    phone?: SortOrderInput | SortOrder
    birthDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    profile?: SortOrderInput | SortOrder
    familyHistoryAnswers?: FamilyHistoryAnswerOrderByRelationAggregateInput
    controlHistoryAnswers?: ControlHistoryAnswerOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    phone?: StringNullableFilter<"User"> | string | null
    birthDate?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    profile?: JsonNullableFilter<"User">
    familyHistoryAnswers?: FamilyHistoryAnswerListRelationFilter
    controlHistoryAnswers?: ControlHistoryAnswerListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    phone?: SortOrderInput | SortOrder
    birthDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    profile?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    birthDate?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    profile?: JsonNullableWithAggregatesFilter<"User">
  }

  export type ProfileConfigWhereInput = {
    AND?: ProfileConfigWhereInput | ProfileConfigWhereInput[]
    OR?: ProfileConfigWhereInput[]
    NOT?: ProfileConfigWhereInput | ProfileConfigWhereInput[]
    id?: IntFilter<"ProfileConfig"> | number
    fieldName?: StringFilter<"ProfileConfig"> | string
    displayName?: StringFilter<"ProfileConfig"> | string
    isRequired?: BoolFilter<"ProfileConfig"> | boolean
    fieldType?: EnumFieldTypeFilter<"ProfileConfig"> | $Enums.FieldType
    createdAt?: DateTimeFilter<"ProfileConfig"> | Date | string
    updatedAt?: DateTimeFilter<"ProfileConfig"> | Date | string
  }

  export type ProfileConfigOrderByWithRelationInput = {
    id?: SortOrder
    fieldName?: SortOrder
    displayName?: SortOrder
    isRequired?: SortOrder
    fieldType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfileConfigWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    fieldName?: string
    AND?: ProfileConfigWhereInput | ProfileConfigWhereInput[]
    OR?: ProfileConfigWhereInput[]
    NOT?: ProfileConfigWhereInput | ProfileConfigWhereInput[]
    displayName?: StringFilter<"ProfileConfig"> | string
    isRequired?: BoolFilter<"ProfileConfig"> | boolean
    fieldType?: EnumFieldTypeFilter<"ProfileConfig"> | $Enums.FieldType
    createdAt?: DateTimeFilter<"ProfileConfig"> | Date | string
    updatedAt?: DateTimeFilter<"ProfileConfig"> | Date | string
  }, "id" | "fieldName">

  export type ProfileConfigOrderByWithAggregationInput = {
    id?: SortOrder
    fieldName?: SortOrder
    displayName?: SortOrder
    isRequired?: SortOrder
    fieldType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProfileConfigCountOrderByAggregateInput
    _avg?: ProfileConfigAvgOrderByAggregateInput
    _max?: ProfileConfigMaxOrderByAggregateInput
    _min?: ProfileConfigMinOrderByAggregateInput
    _sum?: ProfileConfigSumOrderByAggregateInput
  }

  export type ProfileConfigScalarWhereWithAggregatesInput = {
    AND?: ProfileConfigScalarWhereWithAggregatesInput | ProfileConfigScalarWhereWithAggregatesInput[]
    OR?: ProfileConfigScalarWhereWithAggregatesInput[]
    NOT?: ProfileConfigScalarWhereWithAggregatesInput | ProfileConfigScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ProfileConfig"> | number
    fieldName?: StringWithAggregatesFilter<"ProfileConfig"> | string
    displayName?: StringWithAggregatesFilter<"ProfileConfig"> | string
    isRequired?: BoolWithAggregatesFilter<"ProfileConfig"> | boolean
    fieldType?: EnumFieldTypeWithAggregatesFilter<"ProfileConfig"> | $Enums.FieldType
    createdAt?: DateTimeWithAggregatesFilter<"ProfileConfig"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProfileConfig"> | Date | string
  }

  export type ProfileFieldWhereInput = {
    AND?: ProfileFieldWhereInput | ProfileFieldWhereInput[]
    OR?: ProfileFieldWhereInput[]
    NOT?: ProfileFieldWhereInput | ProfileFieldWhereInput[]
    id?: IntFilter<"ProfileField"> | number
    name?: StringFilter<"ProfileField"> | string
    label?: StringFilter<"ProfileField"> | string
    type?: EnumFieldTypeFilter<"ProfileField"> | $Enums.FieldType
    required?: BoolFilter<"ProfileField"> | boolean
    order?: IntFilter<"ProfileField"> | number
    options?: JsonNullableFilter<"ProfileField">
    createdAt?: DateTimeFilter<"ProfileField"> | Date | string
    updatedAt?: DateTimeFilter<"ProfileField"> | Date | string
  }

  export type ProfileFieldOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    label?: SortOrder
    type?: SortOrder
    required?: SortOrder
    order?: SortOrder
    options?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfileFieldWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProfileFieldWhereInput | ProfileFieldWhereInput[]
    OR?: ProfileFieldWhereInput[]
    NOT?: ProfileFieldWhereInput | ProfileFieldWhereInput[]
    name?: StringFilter<"ProfileField"> | string
    label?: StringFilter<"ProfileField"> | string
    type?: EnumFieldTypeFilter<"ProfileField"> | $Enums.FieldType
    required?: BoolFilter<"ProfileField"> | boolean
    order?: IntFilter<"ProfileField"> | number
    options?: JsonNullableFilter<"ProfileField">
    createdAt?: DateTimeFilter<"ProfileField"> | Date | string
    updatedAt?: DateTimeFilter<"ProfileField"> | Date | string
  }, "id">

  export type ProfileFieldOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    label?: SortOrder
    type?: SortOrder
    required?: SortOrder
    order?: SortOrder
    options?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProfileFieldCountOrderByAggregateInput
    _avg?: ProfileFieldAvgOrderByAggregateInput
    _max?: ProfileFieldMaxOrderByAggregateInput
    _min?: ProfileFieldMinOrderByAggregateInput
    _sum?: ProfileFieldSumOrderByAggregateInput
  }

  export type ProfileFieldScalarWhereWithAggregatesInput = {
    AND?: ProfileFieldScalarWhereWithAggregatesInput | ProfileFieldScalarWhereWithAggregatesInput[]
    OR?: ProfileFieldScalarWhereWithAggregatesInput[]
    NOT?: ProfileFieldScalarWhereWithAggregatesInput | ProfileFieldScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ProfileField"> | number
    name?: StringWithAggregatesFilter<"ProfileField"> | string
    label?: StringWithAggregatesFilter<"ProfileField"> | string
    type?: EnumFieldTypeWithAggregatesFilter<"ProfileField"> | $Enums.FieldType
    required?: BoolWithAggregatesFilter<"ProfileField"> | boolean
    order?: IntWithAggregatesFilter<"ProfileField"> | number
    options?: JsonNullableWithAggregatesFilter<"ProfileField">
    createdAt?: DateTimeWithAggregatesFilter<"ProfileField"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProfileField"> | Date | string
  }

  export type FamilyHistoryQuestionWhereInput = {
    AND?: FamilyHistoryQuestionWhereInput | FamilyHistoryQuestionWhereInput[]
    OR?: FamilyHistoryQuestionWhereInput[]
    NOT?: FamilyHistoryQuestionWhereInput | FamilyHistoryQuestionWhereInput[]
    id?: IntFilter<"FamilyHistoryQuestion"> | number
    question?: StringFilter<"FamilyHistoryQuestion"> | string
    description?: StringNullableFilter<"FamilyHistoryQuestion"> | string | null
    isRequired?: BoolFilter<"FamilyHistoryQuestion"> | boolean
    answerType?: EnumAnswerTypeFilter<"FamilyHistoryQuestion"> | $Enums.AnswerType
    options?: JsonNullableFilter<"FamilyHistoryQuestion">
    allowMultiple?: BoolFilter<"FamilyHistoryQuestion"> | boolean
    order?: IntFilter<"FamilyHistoryQuestion"> | number
    createdAt?: DateTimeFilter<"FamilyHistoryQuestion"> | Date | string
    updatedAt?: DateTimeFilter<"FamilyHistoryQuestion"> | Date | string
    answers?: FamilyHistoryAnswerListRelationFilter
  }

  export type FamilyHistoryQuestionOrderByWithRelationInput = {
    id?: SortOrder
    question?: SortOrder
    description?: SortOrderInput | SortOrder
    isRequired?: SortOrder
    answerType?: SortOrder
    options?: SortOrderInput | SortOrder
    allowMultiple?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    answers?: FamilyHistoryAnswerOrderByRelationAggregateInput
  }

  export type FamilyHistoryQuestionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FamilyHistoryQuestionWhereInput | FamilyHistoryQuestionWhereInput[]
    OR?: FamilyHistoryQuestionWhereInput[]
    NOT?: FamilyHistoryQuestionWhereInput | FamilyHistoryQuestionWhereInput[]
    question?: StringFilter<"FamilyHistoryQuestion"> | string
    description?: StringNullableFilter<"FamilyHistoryQuestion"> | string | null
    isRequired?: BoolFilter<"FamilyHistoryQuestion"> | boolean
    answerType?: EnumAnswerTypeFilter<"FamilyHistoryQuestion"> | $Enums.AnswerType
    options?: JsonNullableFilter<"FamilyHistoryQuestion">
    allowMultiple?: BoolFilter<"FamilyHistoryQuestion"> | boolean
    order?: IntFilter<"FamilyHistoryQuestion"> | number
    createdAt?: DateTimeFilter<"FamilyHistoryQuestion"> | Date | string
    updatedAt?: DateTimeFilter<"FamilyHistoryQuestion"> | Date | string
    answers?: FamilyHistoryAnswerListRelationFilter
  }, "id">

  export type FamilyHistoryQuestionOrderByWithAggregationInput = {
    id?: SortOrder
    question?: SortOrder
    description?: SortOrderInput | SortOrder
    isRequired?: SortOrder
    answerType?: SortOrder
    options?: SortOrderInput | SortOrder
    allowMultiple?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FamilyHistoryQuestionCountOrderByAggregateInput
    _avg?: FamilyHistoryQuestionAvgOrderByAggregateInput
    _max?: FamilyHistoryQuestionMaxOrderByAggregateInput
    _min?: FamilyHistoryQuestionMinOrderByAggregateInput
    _sum?: FamilyHistoryQuestionSumOrderByAggregateInput
  }

  export type FamilyHistoryQuestionScalarWhereWithAggregatesInput = {
    AND?: FamilyHistoryQuestionScalarWhereWithAggregatesInput | FamilyHistoryQuestionScalarWhereWithAggregatesInput[]
    OR?: FamilyHistoryQuestionScalarWhereWithAggregatesInput[]
    NOT?: FamilyHistoryQuestionScalarWhereWithAggregatesInput | FamilyHistoryQuestionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FamilyHistoryQuestion"> | number
    question?: StringWithAggregatesFilter<"FamilyHistoryQuestion"> | string
    description?: StringNullableWithAggregatesFilter<"FamilyHistoryQuestion"> | string | null
    isRequired?: BoolWithAggregatesFilter<"FamilyHistoryQuestion"> | boolean
    answerType?: EnumAnswerTypeWithAggregatesFilter<"FamilyHistoryQuestion"> | $Enums.AnswerType
    options?: JsonNullableWithAggregatesFilter<"FamilyHistoryQuestion">
    allowMultiple?: BoolWithAggregatesFilter<"FamilyHistoryQuestion"> | boolean
    order?: IntWithAggregatesFilter<"FamilyHistoryQuestion"> | number
    createdAt?: DateTimeWithAggregatesFilter<"FamilyHistoryQuestion"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FamilyHistoryQuestion"> | Date | string
  }

  export type FamilyHistoryAnswerWhereInput = {
    AND?: FamilyHistoryAnswerWhereInput | FamilyHistoryAnswerWhereInput[]
    OR?: FamilyHistoryAnswerWhereInput[]
    NOT?: FamilyHistoryAnswerWhereInput | FamilyHistoryAnswerWhereInput[]
    id?: IntFilter<"FamilyHistoryAnswer"> | number
    userId?: IntFilter<"FamilyHistoryAnswer"> | number
    questionId?: IntFilter<"FamilyHistoryAnswer"> | number
    answer?: StringFilter<"FamilyHistoryAnswer"> | string
    details?: StringNullableFilter<"FamilyHistoryAnswer"> | string | null
    createdAt?: DateTimeFilter<"FamilyHistoryAnswer"> | Date | string
    updatedAt?: DateTimeFilter<"FamilyHistoryAnswer"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    question?: XOR<FamilyHistoryQuestionRelationFilter, FamilyHistoryQuestionWhereInput>
  }

  export type FamilyHistoryAnswerOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    questionId?: SortOrder
    answer?: SortOrder
    details?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    question?: FamilyHistoryQuestionOrderByWithRelationInput
  }

  export type FamilyHistoryAnswerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId_questionId?: FamilyHistoryAnswerUserIdQuestionIdCompoundUniqueInput
    AND?: FamilyHistoryAnswerWhereInput | FamilyHistoryAnswerWhereInput[]
    OR?: FamilyHistoryAnswerWhereInput[]
    NOT?: FamilyHistoryAnswerWhereInput | FamilyHistoryAnswerWhereInput[]
    userId?: IntFilter<"FamilyHistoryAnswer"> | number
    questionId?: IntFilter<"FamilyHistoryAnswer"> | number
    answer?: StringFilter<"FamilyHistoryAnswer"> | string
    details?: StringNullableFilter<"FamilyHistoryAnswer"> | string | null
    createdAt?: DateTimeFilter<"FamilyHistoryAnswer"> | Date | string
    updatedAt?: DateTimeFilter<"FamilyHistoryAnswer"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    question?: XOR<FamilyHistoryQuestionRelationFilter, FamilyHistoryQuestionWhereInput>
  }, "id" | "userId_questionId">

  export type FamilyHistoryAnswerOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    questionId?: SortOrder
    answer?: SortOrder
    details?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FamilyHistoryAnswerCountOrderByAggregateInput
    _avg?: FamilyHistoryAnswerAvgOrderByAggregateInput
    _max?: FamilyHistoryAnswerMaxOrderByAggregateInput
    _min?: FamilyHistoryAnswerMinOrderByAggregateInput
    _sum?: FamilyHistoryAnswerSumOrderByAggregateInput
  }

  export type FamilyHistoryAnswerScalarWhereWithAggregatesInput = {
    AND?: FamilyHistoryAnswerScalarWhereWithAggregatesInput | FamilyHistoryAnswerScalarWhereWithAggregatesInput[]
    OR?: FamilyHistoryAnswerScalarWhereWithAggregatesInput[]
    NOT?: FamilyHistoryAnswerScalarWhereWithAggregatesInput | FamilyHistoryAnswerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FamilyHistoryAnswer"> | number
    userId?: IntWithAggregatesFilter<"FamilyHistoryAnswer"> | number
    questionId?: IntWithAggregatesFilter<"FamilyHistoryAnswer"> | number
    answer?: StringWithAggregatesFilter<"FamilyHistoryAnswer"> | string
    details?: StringNullableWithAggregatesFilter<"FamilyHistoryAnswer"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"FamilyHistoryAnswer"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FamilyHistoryAnswer"> | Date | string
  }

  export type ControlHistoryQuestionWhereInput = {
    AND?: ControlHistoryQuestionWhereInput | ControlHistoryQuestionWhereInput[]
    OR?: ControlHistoryQuestionWhereInput[]
    NOT?: ControlHistoryQuestionWhereInput | ControlHistoryQuestionWhereInput[]
    id?: IntFilter<"ControlHistoryQuestion"> | number
    question?: StringFilter<"ControlHistoryQuestion"> | string
    description?: StringNullableFilter<"ControlHistoryQuestion"> | string | null
    isRequired?: BoolFilter<"ControlHistoryQuestion"> | boolean
    order?: IntFilter<"ControlHistoryQuestion"> | number
    createdAt?: DateTimeFilter<"ControlHistoryQuestion"> | Date | string
    updatedAt?: DateTimeFilter<"ControlHistoryQuestion"> | Date | string
    answers?: ControlHistoryAnswerListRelationFilter
  }

  export type ControlHistoryQuestionOrderByWithRelationInput = {
    id?: SortOrder
    question?: SortOrder
    description?: SortOrderInput | SortOrder
    isRequired?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    answers?: ControlHistoryAnswerOrderByRelationAggregateInput
  }

  export type ControlHistoryQuestionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ControlHistoryQuestionWhereInput | ControlHistoryQuestionWhereInput[]
    OR?: ControlHistoryQuestionWhereInput[]
    NOT?: ControlHistoryQuestionWhereInput | ControlHistoryQuestionWhereInput[]
    question?: StringFilter<"ControlHistoryQuestion"> | string
    description?: StringNullableFilter<"ControlHistoryQuestion"> | string | null
    isRequired?: BoolFilter<"ControlHistoryQuestion"> | boolean
    order?: IntFilter<"ControlHistoryQuestion"> | number
    createdAt?: DateTimeFilter<"ControlHistoryQuestion"> | Date | string
    updatedAt?: DateTimeFilter<"ControlHistoryQuestion"> | Date | string
    answers?: ControlHistoryAnswerListRelationFilter
  }, "id">

  export type ControlHistoryQuestionOrderByWithAggregationInput = {
    id?: SortOrder
    question?: SortOrder
    description?: SortOrderInput | SortOrder
    isRequired?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ControlHistoryQuestionCountOrderByAggregateInput
    _avg?: ControlHistoryQuestionAvgOrderByAggregateInput
    _max?: ControlHistoryQuestionMaxOrderByAggregateInput
    _min?: ControlHistoryQuestionMinOrderByAggregateInput
    _sum?: ControlHistoryQuestionSumOrderByAggregateInput
  }

  export type ControlHistoryQuestionScalarWhereWithAggregatesInput = {
    AND?: ControlHistoryQuestionScalarWhereWithAggregatesInput | ControlHistoryQuestionScalarWhereWithAggregatesInput[]
    OR?: ControlHistoryQuestionScalarWhereWithAggregatesInput[]
    NOT?: ControlHistoryQuestionScalarWhereWithAggregatesInput | ControlHistoryQuestionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ControlHistoryQuestion"> | number
    question?: StringWithAggregatesFilter<"ControlHistoryQuestion"> | string
    description?: StringNullableWithAggregatesFilter<"ControlHistoryQuestion"> | string | null
    isRequired?: BoolWithAggregatesFilter<"ControlHistoryQuestion"> | boolean
    order?: IntWithAggregatesFilter<"ControlHistoryQuestion"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ControlHistoryQuestion"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ControlHistoryQuestion"> | Date | string
  }

  export type ControlHistoryAnswerWhereInput = {
    AND?: ControlHistoryAnswerWhereInput | ControlHistoryAnswerWhereInput[]
    OR?: ControlHistoryAnswerWhereInput[]
    NOT?: ControlHistoryAnswerWhereInput | ControlHistoryAnswerWhereInput[]
    id?: IntFilter<"ControlHistoryAnswer"> | number
    userId?: IntFilter<"ControlHistoryAnswer"> | number
    questionId?: IntFilter<"ControlHistoryAnswer"> | number
    date?: DateTimeFilter<"ControlHistoryAnswer"> | Date | string
    details?: StringNullableFilter<"ControlHistoryAnswer"> | string | null
    createdAt?: DateTimeFilter<"ControlHistoryAnswer"> | Date | string
    updatedAt?: DateTimeFilter<"ControlHistoryAnswer"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    question?: XOR<ControlHistoryQuestionRelationFilter, ControlHistoryQuestionWhereInput>
  }

  export type ControlHistoryAnswerOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    questionId?: SortOrder
    date?: SortOrder
    details?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    question?: ControlHistoryQuestionOrderByWithRelationInput
  }

  export type ControlHistoryAnswerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId_questionId?: ControlHistoryAnswerUserIdQuestionIdCompoundUniqueInput
    AND?: ControlHistoryAnswerWhereInput | ControlHistoryAnswerWhereInput[]
    OR?: ControlHistoryAnswerWhereInput[]
    NOT?: ControlHistoryAnswerWhereInput | ControlHistoryAnswerWhereInput[]
    userId?: IntFilter<"ControlHistoryAnswer"> | number
    questionId?: IntFilter<"ControlHistoryAnswer"> | number
    date?: DateTimeFilter<"ControlHistoryAnswer"> | Date | string
    details?: StringNullableFilter<"ControlHistoryAnswer"> | string | null
    createdAt?: DateTimeFilter<"ControlHistoryAnswer"> | Date | string
    updatedAt?: DateTimeFilter<"ControlHistoryAnswer"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    question?: XOR<ControlHistoryQuestionRelationFilter, ControlHistoryQuestionWhereInput>
  }, "id" | "userId_questionId">

  export type ControlHistoryAnswerOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    questionId?: SortOrder
    date?: SortOrder
    details?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ControlHistoryAnswerCountOrderByAggregateInput
    _avg?: ControlHistoryAnswerAvgOrderByAggregateInput
    _max?: ControlHistoryAnswerMaxOrderByAggregateInput
    _min?: ControlHistoryAnswerMinOrderByAggregateInput
    _sum?: ControlHistoryAnswerSumOrderByAggregateInput
  }

  export type ControlHistoryAnswerScalarWhereWithAggregatesInput = {
    AND?: ControlHistoryAnswerScalarWhereWithAggregatesInput | ControlHistoryAnswerScalarWhereWithAggregatesInput[]
    OR?: ControlHistoryAnswerScalarWhereWithAggregatesInput[]
    NOT?: ControlHistoryAnswerScalarWhereWithAggregatesInput | ControlHistoryAnswerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ControlHistoryAnswer"> | number
    userId?: IntWithAggregatesFilter<"ControlHistoryAnswer"> | number
    questionId?: IntWithAggregatesFilter<"ControlHistoryAnswer"> | number
    date?: DateTimeWithAggregatesFilter<"ControlHistoryAnswer"> | Date | string
    details?: StringNullableWithAggregatesFilter<"ControlHistoryAnswer"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ControlHistoryAnswer"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ControlHistoryAnswer"> | Date | string
  }

  export type UserCreateInput = {
    email: string
    password: string
    name: string
    role?: $Enums.Role
    phone?: string | null
    birthDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    familyHistoryAnswers?: FamilyHistoryAnswerCreateNestedManyWithoutUserInput
    controlHistoryAnswers?: ControlHistoryAnswerCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    name: string
    role?: $Enums.Role
    phone?: string | null
    birthDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    familyHistoryAnswers?: FamilyHistoryAnswerUncheckedCreateNestedManyWithoutUserInput
    controlHistoryAnswers?: ControlHistoryAnswerUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    familyHistoryAnswers?: FamilyHistoryAnswerUpdateManyWithoutUserNestedInput
    controlHistoryAnswers?: ControlHistoryAnswerUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    familyHistoryAnswers?: FamilyHistoryAnswerUncheckedUpdateManyWithoutUserNestedInput
    controlHistoryAnswers?: ControlHistoryAnswerUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    password: string
    name: string
    role?: $Enums.Role
    phone?: string | null
    birthDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ProfileConfigCreateInput = {
    fieldName: string
    displayName: string
    isRequired?: boolean
    fieldType: $Enums.FieldType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfileConfigUncheckedCreateInput = {
    id?: number
    fieldName: string
    displayName: string
    isRequired?: boolean
    fieldType: $Enums.FieldType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfileConfigUpdateInput = {
    fieldName?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    fieldType?: EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileConfigUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fieldName?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    fieldType?: EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileConfigCreateManyInput = {
    id?: number
    fieldName: string
    displayName: string
    isRequired?: boolean
    fieldType: $Enums.FieldType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfileConfigUpdateManyMutationInput = {
    fieldName?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    fieldType?: EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileConfigUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fieldName?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    fieldType?: EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileFieldCreateInput = {
    name: string
    label: string
    type: $Enums.FieldType
    required?: boolean
    order?: number
    options?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfileFieldUncheckedCreateInput = {
    id?: number
    name: string
    label: string
    type: $Enums.FieldType
    required?: boolean
    order?: number
    options?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfileFieldUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    type?: EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
    required?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    options?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileFieldUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    type?: EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
    required?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    options?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileFieldCreateManyInput = {
    id?: number
    name: string
    label: string
    type: $Enums.FieldType
    required?: boolean
    order?: number
    options?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfileFieldUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    type?: EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
    required?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    options?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileFieldUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    type?: EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
    required?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    options?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FamilyHistoryQuestionCreateInput = {
    question: string
    description?: string | null
    isRequired?: boolean
    answerType: $Enums.AnswerType
    options?: NullableJsonNullValueInput | InputJsonValue
    allowMultiple?: boolean
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    answers?: FamilyHistoryAnswerCreateNestedManyWithoutQuestionInput
  }

  export type FamilyHistoryQuestionUncheckedCreateInput = {
    id?: number
    question: string
    description?: string | null
    isRequired?: boolean
    answerType: $Enums.AnswerType
    options?: NullableJsonNullValueInput | InputJsonValue
    allowMultiple?: boolean
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    answers?: FamilyHistoryAnswerUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type FamilyHistoryQuestionUpdateInput = {
    question?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    answerType?: EnumAnswerTypeFieldUpdateOperationsInput | $Enums.AnswerType
    options?: NullableJsonNullValueInput | InputJsonValue
    allowMultiple?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    answers?: FamilyHistoryAnswerUpdateManyWithoutQuestionNestedInput
  }

  export type FamilyHistoryQuestionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    answerType?: EnumAnswerTypeFieldUpdateOperationsInput | $Enums.AnswerType
    options?: NullableJsonNullValueInput | InputJsonValue
    allowMultiple?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    answers?: FamilyHistoryAnswerUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type FamilyHistoryQuestionCreateManyInput = {
    id?: number
    question: string
    description?: string | null
    isRequired?: boolean
    answerType: $Enums.AnswerType
    options?: NullableJsonNullValueInput | InputJsonValue
    allowMultiple?: boolean
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FamilyHistoryQuestionUpdateManyMutationInput = {
    question?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    answerType?: EnumAnswerTypeFieldUpdateOperationsInput | $Enums.AnswerType
    options?: NullableJsonNullValueInput | InputJsonValue
    allowMultiple?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FamilyHistoryQuestionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    answerType?: EnumAnswerTypeFieldUpdateOperationsInput | $Enums.AnswerType
    options?: NullableJsonNullValueInput | InputJsonValue
    allowMultiple?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FamilyHistoryAnswerCreateInput = {
    answer: string
    details?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutFamilyHistoryAnswersInput
    question: FamilyHistoryQuestionCreateNestedOneWithoutAnswersInput
  }

  export type FamilyHistoryAnswerUncheckedCreateInput = {
    id?: number
    userId: number
    questionId: number
    answer: string
    details?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FamilyHistoryAnswerUpdateInput = {
    answer?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFamilyHistoryAnswersNestedInput
    question?: FamilyHistoryQuestionUpdateOneRequiredWithoutAnswersNestedInput
  }

  export type FamilyHistoryAnswerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    answer?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FamilyHistoryAnswerCreateManyInput = {
    id?: number
    userId: number
    questionId: number
    answer: string
    details?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FamilyHistoryAnswerUpdateManyMutationInput = {
    answer?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FamilyHistoryAnswerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    answer?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ControlHistoryQuestionCreateInput = {
    question: string
    description?: string | null
    isRequired?: boolean
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    answers?: ControlHistoryAnswerCreateNestedManyWithoutQuestionInput
  }

  export type ControlHistoryQuestionUncheckedCreateInput = {
    id?: number
    question: string
    description?: string | null
    isRequired?: boolean
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    answers?: ControlHistoryAnswerUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type ControlHistoryQuestionUpdateInput = {
    question?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    answers?: ControlHistoryAnswerUpdateManyWithoutQuestionNestedInput
  }

  export type ControlHistoryQuestionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    answers?: ControlHistoryAnswerUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type ControlHistoryQuestionCreateManyInput = {
    id?: number
    question: string
    description?: string | null
    isRequired?: boolean
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ControlHistoryQuestionUpdateManyMutationInput = {
    question?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ControlHistoryQuestionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ControlHistoryAnswerCreateInput = {
    date: Date | string
    details?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutControlHistoryAnswersInput
    question: ControlHistoryQuestionCreateNestedOneWithoutAnswersInput
  }

  export type ControlHistoryAnswerUncheckedCreateInput = {
    id?: number
    userId: number
    questionId: number
    date: Date | string
    details?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ControlHistoryAnswerUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutControlHistoryAnswersNestedInput
    question?: ControlHistoryQuestionUpdateOneRequiredWithoutAnswersNestedInput
  }

  export type ControlHistoryAnswerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ControlHistoryAnswerCreateManyInput = {
    id?: number
    userId: number
    questionId: number
    date: Date | string
    details?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ControlHistoryAnswerUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ControlHistoryAnswerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type FamilyHistoryAnswerListRelationFilter = {
    every?: FamilyHistoryAnswerWhereInput
    some?: FamilyHistoryAnswerWhereInput
    none?: FamilyHistoryAnswerWhereInput
  }

  export type ControlHistoryAnswerListRelationFilter = {
    every?: ControlHistoryAnswerWhereInput
    some?: ControlHistoryAnswerWhereInput
    none?: ControlHistoryAnswerWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type FamilyHistoryAnswerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ControlHistoryAnswerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    phone?: SortOrder
    birthDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    profile?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    phone?: SortOrder
    birthDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    phone?: SortOrder
    birthDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumFieldTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.FieldType | EnumFieldTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FieldType[]
    notIn?: $Enums.FieldType[]
    not?: NestedEnumFieldTypeFilter<$PrismaModel> | $Enums.FieldType
  }

  export type ProfileConfigCountOrderByAggregateInput = {
    id?: SortOrder
    fieldName?: SortOrder
    displayName?: SortOrder
    isRequired?: SortOrder
    fieldType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfileConfigAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProfileConfigMaxOrderByAggregateInput = {
    id?: SortOrder
    fieldName?: SortOrder
    displayName?: SortOrder
    isRequired?: SortOrder
    fieldType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfileConfigMinOrderByAggregateInput = {
    id?: SortOrder
    fieldName?: SortOrder
    displayName?: SortOrder
    isRequired?: SortOrder
    fieldType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfileConfigSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumFieldTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FieldType | EnumFieldTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FieldType[]
    notIn?: $Enums.FieldType[]
    not?: NestedEnumFieldTypeWithAggregatesFilter<$PrismaModel> | $Enums.FieldType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFieldTypeFilter<$PrismaModel>
    _max?: NestedEnumFieldTypeFilter<$PrismaModel>
  }

  export type ProfileFieldCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    label?: SortOrder
    type?: SortOrder
    required?: SortOrder
    order?: SortOrder
    options?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfileFieldAvgOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
  }

  export type ProfileFieldMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    label?: SortOrder
    type?: SortOrder
    required?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfileFieldMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    label?: SortOrder
    type?: SortOrder
    required?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfileFieldSumOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
  }

  export type EnumAnswerTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AnswerType | EnumAnswerTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AnswerType[]
    notIn?: $Enums.AnswerType[]
    not?: NestedEnumAnswerTypeFilter<$PrismaModel> | $Enums.AnswerType
  }

  export type FamilyHistoryQuestionCountOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    description?: SortOrder
    isRequired?: SortOrder
    answerType?: SortOrder
    options?: SortOrder
    allowMultiple?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FamilyHistoryQuestionAvgOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
  }

  export type FamilyHistoryQuestionMaxOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    description?: SortOrder
    isRequired?: SortOrder
    answerType?: SortOrder
    allowMultiple?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FamilyHistoryQuestionMinOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    description?: SortOrder
    isRequired?: SortOrder
    answerType?: SortOrder
    allowMultiple?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FamilyHistoryQuestionSumOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
  }

  export type EnumAnswerTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AnswerType | EnumAnswerTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AnswerType[]
    notIn?: $Enums.AnswerType[]
    not?: NestedEnumAnswerTypeWithAggregatesFilter<$PrismaModel> | $Enums.AnswerType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAnswerTypeFilter<$PrismaModel>
    _max?: NestedEnumAnswerTypeFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type FamilyHistoryQuestionRelationFilter = {
    is?: FamilyHistoryQuestionWhereInput
    isNot?: FamilyHistoryQuestionWhereInput
  }

  export type FamilyHistoryAnswerUserIdQuestionIdCompoundUniqueInput = {
    userId: number
    questionId: number
  }

  export type FamilyHistoryAnswerCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    questionId?: SortOrder
    answer?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FamilyHistoryAnswerAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    questionId?: SortOrder
  }

  export type FamilyHistoryAnswerMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    questionId?: SortOrder
    answer?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FamilyHistoryAnswerMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    questionId?: SortOrder
    answer?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FamilyHistoryAnswerSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    questionId?: SortOrder
  }

  export type ControlHistoryQuestionCountOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    description?: SortOrder
    isRequired?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ControlHistoryQuestionAvgOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
  }

  export type ControlHistoryQuestionMaxOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    description?: SortOrder
    isRequired?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ControlHistoryQuestionMinOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    description?: SortOrder
    isRequired?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ControlHistoryQuestionSumOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
  }

  export type ControlHistoryQuestionRelationFilter = {
    is?: ControlHistoryQuestionWhereInput
    isNot?: ControlHistoryQuestionWhereInput
  }

  export type ControlHistoryAnswerUserIdQuestionIdCompoundUniqueInput = {
    userId: number
    questionId: number
  }

  export type ControlHistoryAnswerCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    questionId?: SortOrder
    date?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ControlHistoryAnswerAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    questionId?: SortOrder
  }

  export type ControlHistoryAnswerMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    questionId?: SortOrder
    date?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ControlHistoryAnswerMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    questionId?: SortOrder
    date?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ControlHistoryAnswerSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    questionId?: SortOrder
  }

  export type FamilyHistoryAnswerCreateNestedManyWithoutUserInput = {
    create?: XOR<FamilyHistoryAnswerCreateWithoutUserInput, FamilyHistoryAnswerUncheckedCreateWithoutUserInput> | FamilyHistoryAnswerCreateWithoutUserInput[] | FamilyHistoryAnswerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FamilyHistoryAnswerCreateOrConnectWithoutUserInput | FamilyHistoryAnswerCreateOrConnectWithoutUserInput[]
    createMany?: FamilyHistoryAnswerCreateManyUserInputEnvelope
    connect?: FamilyHistoryAnswerWhereUniqueInput | FamilyHistoryAnswerWhereUniqueInput[]
  }

  export type ControlHistoryAnswerCreateNestedManyWithoutUserInput = {
    create?: XOR<ControlHistoryAnswerCreateWithoutUserInput, ControlHistoryAnswerUncheckedCreateWithoutUserInput> | ControlHistoryAnswerCreateWithoutUserInput[] | ControlHistoryAnswerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ControlHistoryAnswerCreateOrConnectWithoutUserInput | ControlHistoryAnswerCreateOrConnectWithoutUserInput[]
    createMany?: ControlHistoryAnswerCreateManyUserInputEnvelope
    connect?: ControlHistoryAnswerWhereUniqueInput | ControlHistoryAnswerWhereUniqueInput[]
  }

  export type FamilyHistoryAnswerUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FamilyHistoryAnswerCreateWithoutUserInput, FamilyHistoryAnswerUncheckedCreateWithoutUserInput> | FamilyHistoryAnswerCreateWithoutUserInput[] | FamilyHistoryAnswerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FamilyHistoryAnswerCreateOrConnectWithoutUserInput | FamilyHistoryAnswerCreateOrConnectWithoutUserInput[]
    createMany?: FamilyHistoryAnswerCreateManyUserInputEnvelope
    connect?: FamilyHistoryAnswerWhereUniqueInput | FamilyHistoryAnswerWhereUniqueInput[]
  }

  export type ControlHistoryAnswerUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ControlHistoryAnswerCreateWithoutUserInput, ControlHistoryAnswerUncheckedCreateWithoutUserInput> | ControlHistoryAnswerCreateWithoutUserInput[] | ControlHistoryAnswerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ControlHistoryAnswerCreateOrConnectWithoutUserInput | ControlHistoryAnswerCreateOrConnectWithoutUserInput[]
    createMany?: ControlHistoryAnswerCreateManyUserInputEnvelope
    connect?: ControlHistoryAnswerWhereUniqueInput | ControlHistoryAnswerWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type FamilyHistoryAnswerUpdateManyWithoutUserNestedInput = {
    create?: XOR<FamilyHistoryAnswerCreateWithoutUserInput, FamilyHistoryAnswerUncheckedCreateWithoutUserInput> | FamilyHistoryAnswerCreateWithoutUserInput[] | FamilyHistoryAnswerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FamilyHistoryAnswerCreateOrConnectWithoutUserInput | FamilyHistoryAnswerCreateOrConnectWithoutUserInput[]
    upsert?: FamilyHistoryAnswerUpsertWithWhereUniqueWithoutUserInput | FamilyHistoryAnswerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FamilyHistoryAnswerCreateManyUserInputEnvelope
    set?: FamilyHistoryAnswerWhereUniqueInput | FamilyHistoryAnswerWhereUniqueInput[]
    disconnect?: FamilyHistoryAnswerWhereUniqueInput | FamilyHistoryAnswerWhereUniqueInput[]
    delete?: FamilyHistoryAnswerWhereUniqueInput | FamilyHistoryAnswerWhereUniqueInput[]
    connect?: FamilyHistoryAnswerWhereUniqueInput | FamilyHistoryAnswerWhereUniqueInput[]
    update?: FamilyHistoryAnswerUpdateWithWhereUniqueWithoutUserInput | FamilyHistoryAnswerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FamilyHistoryAnswerUpdateManyWithWhereWithoutUserInput | FamilyHistoryAnswerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FamilyHistoryAnswerScalarWhereInput | FamilyHistoryAnswerScalarWhereInput[]
  }

  export type ControlHistoryAnswerUpdateManyWithoutUserNestedInput = {
    create?: XOR<ControlHistoryAnswerCreateWithoutUserInput, ControlHistoryAnswerUncheckedCreateWithoutUserInput> | ControlHistoryAnswerCreateWithoutUserInput[] | ControlHistoryAnswerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ControlHistoryAnswerCreateOrConnectWithoutUserInput | ControlHistoryAnswerCreateOrConnectWithoutUserInput[]
    upsert?: ControlHistoryAnswerUpsertWithWhereUniqueWithoutUserInput | ControlHistoryAnswerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ControlHistoryAnswerCreateManyUserInputEnvelope
    set?: ControlHistoryAnswerWhereUniqueInput | ControlHistoryAnswerWhereUniqueInput[]
    disconnect?: ControlHistoryAnswerWhereUniqueInput | ControlHistoryAnswerWhereUniqueInput[]
    delete?: ControlHistoryAnswerWhereUniqueInput | ControlHistoryAnswerWhereUniqueInput[]
    connect?: ControlHistoryAnswerWhereUniqueInput | ControlHistoryAnswerWhereUniqueInput[]
    update?: ControlHistoryAnswerUpdateWithWhereUniqueWithoutUserInput | ControlHistoryAnswerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ControlHistoryAnswerUpdateManyWithWhereWithoutUserInput | ControlHistoryAnswerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ControlHistoryAnswerScalarWhereInput | ControlHistoryAnswerScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FamilyHistoryAnswerUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FamilyHistoryAnswerCreateWithoutUserInput, FamilyHistoryAnswerUncheckedCreateWithoutUserInput> | FamilyHistoryAnswerCreateWithoutUserInput[] | FamilyHistoryAnswerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FamilyHistoryAnswerCreateOrConnectWithoutUserInput | FamilyHistoryAnswerCreateOrConnectWithoutUserInput[]
    upsert?: FamilyHistoryAnswerUpsertWithWhereUniqueWithoutUserInput | FamilyHistoryAnswerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FamilyHistoryAnswerCreateManyUserInputEnvelope
    set?: FamilyHistoryAnswerWhereUniqueInput | FamilyHistoryAnswerWhereUniqueInput[]
    disconnect?: FamilyHistoryAnswerWhereUniqueInput | FamilyHistoryAnswerWhereUniqueInput[]
    delete?: FamilyHistoryAnswerWhereUniqueInput | FamilyHistoryAnswerWhereUniqueInput[]
    connect?: FamilyHistoryAnswerWhereUniqueInput | FamilyHistoryAnswerWhereUniqueInput[]
    update?: FamilyHistoryAnswerUpdateWithWhereUniqueWithoutUserInput | FamilyHistoryAnswerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FamilyHistoryAnswerUpdateManyWithWhereWithoutUserInput | FamilyHistoryAnswerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FamilyHistoryAnswerScalarWhereInput | FamilyHistoryAnswerScalarWhereInput[]
  }

  export type ControlHistoryAnswerUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ControlHistoryAnswerCreateWithoutUserInput, ControlHistoryAnswerUncheckedCreateWithoutUserInput> | ControlHistoryAnswerCreateWithoutUserInput[] | ControlHistoryAnswerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ControlHistoryAnswerCreateOrConnectWithoutUserInput | ControlHistoryAnswerCreateOrConnectWithoutUserInput[]
    upsert?: ControlHistoryAnswerUpsertWithWhereUniqueWithoutUserInput | ControlHistoryAnswerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ControlHistoryAnswerCreateManyUserInputEnvelope
    set?: ControlHistoryAnswerWhereUniqueInput | ControlHistoryAnswerWhereUniqueInput[]
    disconnect?: ControlHistoryAnswerWhereUniqueInput | ControlHistoryAnswerWhereUniqueInput[]
    delete?: ControlHistoryAnswerWhereUniqueInput | ControlHistoryAnswerWhereUniqueInput[]
    connect?: ControlHistoryAnswerWhereUniqueInput | ControlHistoryAnswerWhereUniqueInput[]
    update?: ControlHistoryAnswerUpdateWithWhereUniqueWithoutUserInput | ControlHistoryAnswerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ControlHistoryAnswerUpdateManyWithWhereWithoutUserInput | ControlHistoryAnswerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ControlHistoryAnswerScalarWhereInput | ControlHistoryAnswerScalarWhereInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumFieldTypeFieldUpdateOperationsInput = {
    set?: $Enums.FieldType
  }

  export type FamilyHistoryAnswerCreateNestedManyWithoutQuestionInput = {
    create?: XOR<FamilyHistoryAnswerCreateWithoutQuestionInput, FamilyHistoryAnswerUncheckedCreateWithoutQuestionInput> | FamilyHistoryAnswerCreateWithoutQuestionInput[] | FamilyHistoryAnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: FamilyHistoryAnswerCreateOrConnectWithoutQuestionInput | FamilyHistoryAnswerCreateOrConnectWithoutQuestionInput[]
    createMany?: FamilyHistoryAnswerCreateManyQuestionInputEnvelope
    connect?: FamilyHistoryAnswerWhereUniqueInput | FamilyHistoryAnswerWhereUniqueInput[]
  }

  export type FamilyHistoryAnswerUncheckedCreateNestedManyWithoutQuestionInput = {
    create?: XOR<FamilyHistoryAnswerCreateWithoutQuestionInput, FamilyHistoryAnswerUncheckedCreateWithoutQuestionInput> | FamilyHistoryAnswerCreateWithoutQuestionInput[] | FamilyHistoryAnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: FamilyHistoryAnswerCreateOrConnectWithoutQuestionInput | FamilyHistoryAnswerCreateOrConnectWithoutQuestionInput[]
    createMany?: FamilyHistoryAnswerCreateManyQuestionInputEnvelope
    connect?: FamilyHistoryAnswerWhereUniqueInput | FamilyHistoryAnswerWhereUniqueInput[]
  }

  export type EnumAnswerTypeFieldUpdateOperationsInput = {
    set?: $Enums.AnswerType
  }

  export type FamilyHistoryAnswerUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<FamilyHistoryAnswerCreateWithoutQuestionInput, FamilyHistoryAnswerUncheckedCreateWithoutQuestionInput> | FamilyHistoryAnswerCreateWithoutQuestionInput[] | FamilyHistoryAnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: FamilyHistoryAnswerCreateOrConnectWithoutQuestionInput | FamilyHistoryAnswerCreateOrConnectWithoutQuestionInput[]
    upsert?: FamilyHistoryAnswerUpsertWithWhereUniqueWithoutQuestionInput | FamilyHistoryAnswerUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: FamilyHistoryAnswerCreateManyQuestionInputEnvelope
    set?: FamilyHistoryAnswerWhereUniqueInput | FamilyHistoryAnswerWhereUniqueInput[]
    disconnect?: FamilyHistoryAnswerWhereUniqueInput | FamilyHistoryAnswerWhereUniqueInput[]
    delete?: FamilyHistoryAnswerWhereUniqueInput | FamilyHistoryAnswerWhereUniqueInput[]
    connect?: FamilyHistoryAnswerWhereUniqueInput | FamilyHistoryAnswerWhereUniqueInput[]
    update?: FamilyHistoryAnswerUpdateWithWhereUniqueWithoutQuestionInput | FamilyHistoryAnswerUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: FamilyHistoryAnswerUpdateManyWithWhereWithoutQuestionInput | FamilyHistoryAnswerUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: FamilyHistoryAnswerScalarWhereInput | FamilyHistoryAnswerScalarWhereInput[]
  }

  export type FamilyHistoryAnswerUncheckedUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<FamilyHistoryAnswerCreateWithoutQuestionInput, FamilyHistoryAnswerUncheckedCreateWithoutQuestionInput> | FamilyHistoryAnswerCreateWithoutQuestionInput[] | FamilyHistoryAnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: FamilyHistoryAnswerCreateOrConnectWithoutQuestionInput | FamilyHistoryAnswerCreateOrConnectWithoutQuestionInput[]
    upsert?: FamilyHistoryAnswerUpsertWithWhereUniqueWithoutQuestionInput | FamilyHistoryAnswerUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: FamilyHistoryAnswerCreateManyQuestionInputEnvelope
    set?: FamilyHistoryAnswerWhereUniqueInput | FamilyHistoryAnswerWhereUniqueInput[]
    disconnect?: FamilyHistoryAnswerWhereUniqueInput | FamilyHistoryAnswerWhereUniqueInput[]
    delete?: FamilyHistoryAnswerWhereUniqueInput | FamilyHistoryAnswerWhereUniqueInput[]
    connect?: FamilyHistoryAnswerWhereUniqueInput | FamilyHistoryAnswerWhereUniqueInput[]
    update?: FamilyHistoryAnswerUpdateWithWhereUniqueWithoutQuestionInput | FamilyHistoryAnswerUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: FamilyHistoryAnswerUpdateManyWithWhereWithoutQuestionInput | FamilyHistoryAnswerUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: FamilyHistoryAnswerScalarWhereInput | FamilyHistoryAnswerScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutFamilyHistoryAnswersInput = {
    create?: XOR<UserCreateWithoutFamilyHistoryAnswersInput, UserUncheckedCreateWithoutFamilyHistoryAnswersInput>
    connectOrCreate?: UserCreateOrConnectWithoutFamilyHistoryAnswersInput
    connect?: UserWhereUniqueInput
  }

  export type FamilyHistoryQuestionCreateNestedOneWithoutAnswersInput = {
    create?: XOR<FamilyHistoryQuestionCreateWithoutAnswersInput, FamilyHistoryQuestionUncheckedCreateWithoutAnswersInput>
    connectOrCreate?: FamilyHistoryQuestionCreateOrConnectWithoutAnswersInput
    connect?: FamilyHistoryQuestionWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFamilyHistoryAnswersNestedInput = {
    create?: XOR<UserCreateWithoutFamilyHistoryAnswersInput, UserUncheckedCreateWithoutFamilyHistoryAnswersInput>
    connectOrCreate?: UserCreateOrConnectWithoutFamilyHistoryAnswersInput
    upsert?: UserUpsertWithoutFamilyHistoryAnswersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFamilyHistoryAnswersInput, UserUpdateWithoutFamilyHistoryAnswersInput>, UserUncheckedUpdateWithoutFamilyHistoryAnswersInput>
  }

  export type FamilyHistoryQuestionUpdateOneRequiredWithoutAnswersNestedInput = {
    create?: XOR<FamilyHistoryQuestionCreateWithoutAnswersInput, FamilyHistoryQuestionUncheckedCreateWithoutAnswersInput>
    connectOrCreate?: FamilyHistoryQuestionCreateOrConnectWithoutAnswersInput
    upsert?: FamilyHistoryQuestionUpsertWithoutAnswersInput
    connect?: FamilyHistoryQuestionWhereUniqueInput
    update?: XOR<XOR<FamilyHistoryQuestionUpdateToOneWithWhereWithoutAnswersInput, FamilyHistoryQuestionUpdateWithoutAnswersInput>, FamilyHistoryQuestionUncheckedUpdateWithoutAnswersInput>
  }

  export type ControlHistoryAnswerCreateNestedManyWithoutQuestionInput = {
    create?: XOR<ControlHistoryAnswerCreateWithoutQuestionInput, ControlHistoryAnswerUncheckedCreateWithoutQuestionInput> | ControlHistoryAnswerCreateWithoutQuestionInput[] | ControlHistoryAnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: ControlHistoryAnswerCreateOrConnectWithoutQuestionInput | ControlHistoryAnswerCreateOrConnectWithoutQuestionInput[]
    createMany?: ControlHistoryAnswerCreateManyQuestionInputEnvelope
    connect?: ControlHistoryAnswerWhereUniqueInput | ControlHistoryAnswerWhereUniqueInput[]
  }

  export type ControlHistoryAnswerUncheckedCreateNestedManyWithoutQuestionInput = {
    create?: XOR<ControlHistoryAnswerCreateWithoutQuestionInput, ControlHistoryAnswerUncheckedCreateWithoutQuestionInput> | ControlHistoryAnswerCreateWithoutQuestionInput[] | ControlHistoryAnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: ControlHistoryAnswerCreateOrConnectWithoutQuestionInput | ControlHistoryAnswerCreateOrConnectWithoutQuestionInput[]
    createMany?: ControlHistoryAnswerCreateManyQuestionInputEnvelope
    connect?: ControlHistoryAnswerWhereUniqueInput | ControlHistoryAnswerWhereUniqueInput[]
  }

  export type ControlHistoryAnswerUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<ControlHistoryAnswerCreateWithoutQuestionInput, ControlHistoryAnswerUncheckedCreateWithoutQuestionInput> | ControlHistoryAnswerCreateWithoutQuestionInput[] | ControlHistoryAnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: ControlHistoryAnswerCreateOrConnectWithoutQuestionInput | ControlHistoryAnswerCreateOrConnectWithoutQuestionInput[]
    upsert?: ControlHistoryAnswerUpsertWithWhereUniqueWithoutQuestionInput | ControlHistoryAnswerUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: ControlHistoryAnswerCreateManyQuestionInputEnvelope
    set?: ControlHistoryAnswerWhereUniqueInput | ControlHistoryAnswerWhereUniqueInput[]
    disconnect?: ControlHistoryAnswerWhereUniqueInput | ControlHistoryAnswerWhereUniqueInput[]
    delete?: ControlHistoryAnswerWhereUniqueInput | ControlHistoryAnswerWhereUniqueInput[]
    connect?: ControlHistoryAnswerWhereUniqueInput | ControlHistoryAnswerWhereUniqueInput[]
    update?: ControlHistoryAnswerUpdateWithWhereUniqueWithoutQuestionInput | ControlHistoryAnswerUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: ControlHistoryAnswerUpdateManyWithWhereWithoutQuestionInput | ControlHistoryAnswerUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: ControlHistoryAnswerScalarWhereInput | ControlHistoryAnswerScalarWhereInput[]
  }

  export type ControlHistoryAnswerUncheckedUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<ControlHistoryAnswerCreateWithoutQuestionInput, ControlHistoryAnswerUncheckedCreateWithoutQuestionInput> | ControlHistoryAnswerCreateWithoutQuestionInput[] | ControlHistoryAnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: ControlHistoryAnswerCreateOrConnectWithoutQuestionInput | ControlHistoryAnswerCreateOrConnectWithoutQuestionInput[]
    upsert?: ControlHistoryAnswerUpsertWithWhereUniqueWithoutQuestionInput | ControlHistoryAnswerUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: ControlHistoryAnswerCreateManyQuestionInputEnvelope
    set?: ControlHistoryAnswerWhereUniqueInput | ControlHistoryAnswerWhereUniqueInput[]
    disconnect?: ControlHistoryAnswerWhereUniqueInput | ControlHistoryAnswerWhereUniqueInput[]
    delete?: ControlHistoryAnswerWhereUniqueInput | ControlHistoryAnswerWhereUniqueInput[]
    connect?: ControlHistoryAnswerWhereUniqueInput | ControlHistoryAnswerWhereUniqueInput[]
    update?: ControlHistoryAnswerUpdateWithWhereUniqueWithoutQuestionInput | ControlHistoryAnswerUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: ControlHistoryAnswerUpdateManyWithWhereWithoutQuestionInput | ControlHistoryAnswerUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: ControlHistoryAnswerScalarWhereInput | ControlHistoryAnswerScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutControlHistoryAnswersInput = {
    create?: XOR<UserCreateWithoutControlHistoryAnswersInput, UserUncheckedCreateWithoutControlHistoryAnswersInput>
    connectOrCreate?: UserCreateOrConnectWithoutControlHistoryAnswersInput
    connect?: UserWhereUniqueInput
  }

  export type ControlHistoryQuestionCreateNestedOneWithoutAnswersInput = {
    create?: XOR<ControlHistoryQuestionCreateWithoutAnswersInput, ControlHistoryQuestionUncheckedCreateWithoutAnswersInput>
    connectOrCreate?: ControlHistoryQuestionCreateOrConnectWithoutAnswersInput
    connect?: ControlHistoryQuestionWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutControlHistoryAnswersNestedInput = {
    create?: XOR<UserCreateWithoutControlHistoryAnswersInput, UserUncheckedCreateWithoutControlHistoryAnswersInput>
    connectOrCreate?: UserCreateOrConnectWithoutControlHistoryAnswersInput
    upsert?: UserUpsertWithoutControlHistoryAnswersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutControlHistoryAnswersInput, UserUpdateWithoutControlHistoryAnswersInput>, UserUncheckedUpdateWithoutControlHistoryAnswersInput>
  }

  export type ControlHistoryQuestionUpdateOneRequiredWithoutAnswersNestedInput = {
    create?: XOR<ControlHistoryQuestionCreateWithoutAnswersInput, ControlHistoryQuestionUncheckedCreateWithoutAnswersInput>
    connectOrCreate?: ControlHistoryQuestionCreateOrConnectWithoutAnswersInput
    upsert?: ControlHistoryQuestionUpsertWithoutAnswersInput
    connect?: ControlHistoryQuestionWhereUniqueInput
    update?: XOR<XOR<ControlHistoryQuestionUpdateToOneWithWhereWithoutAnswersInput, ControlHistoryQuestionUpdateWithoutAnswersInput>, ControlHistoryQuestionUncheckedUpdateWithoutAnswersInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumFieldTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.FieldType | EnumFieldTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FieldType[]
    notIn?: $Enums.FieldType[]
    not?: NestedEnumFieldTypeFilter<$PrismaModel> | $Enums.FieldType
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumFieldTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FieldType | EnumFieldTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FieldType[]
    notIn?: $Enums.FieldType[]
    not?: NestedEnumFieldTypeWithAggregatesFilter<$PrismaModel> | $Enums.FieldType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFieldTypeFilter<$PrismaModel>
    _max?: NestedEnumFieldTypeFilter<$PrismaModel>
  }

  export type NestedEnumAnswerTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AnswerType | EnumAnswerTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AnswerType[]
    notIn?: $Enums.AnswerType[]
    not?: NestedEnumAnswerTypeFilter<$PrismaModel> | $Enums.AnswerType
  }

  export type NestedEnumAnswerTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AnswerType | EnumAnswerTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AnswerType[]
    notIn?: $Enums.AnswerType[]
    not?: NestedEnumAnswerTypeWithAggregatesFilter<$PrismaModel> | $Enums.AnswerType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAnswerTypeFilter<$PrismaModel>
    _max?: NestedEnumAnswerTypeFilter<$PrismaModel>
  }

  export type FamilyHistoryAnswerCreateWithoutUserInput = {
    answer: string
    details?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    question: FamilyHistoryQuestionCreateNestedOneWithoutAnswersInput
  }

  export type FamilyHistoryAnswerUncheckedCreateWithoutUserInput = {
    id?: number
    questionId: number
    answer: string
    details?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FamilyHistoryAnswerCreateOrConnectWithoutUserInput = {
    where: FamilyHistoryAnswerWhereUniqueInput
    create: XOR<FamilyHistoryAnswerCreateWithoutUserInput, FamilyHistoryAnswerUncheckedCreateWithoutUserInput>
  }

  export type FamilyHistoryAnswerCreateManyUserInputEnvelope = {
    data: FamilyHistoryAnswerCreateManyUserInput | FamilyHistoryAnswerCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ControlHistoryAnswerCreateWithoutUserInput = {
    date: Date | string
    details?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    question: ControlHistoryQuestionCreateNestedOneWithoutAnswersInput
  }

  export type ControlHistoryAnswerUncheckedCreateWithoutUserInput = {
    id?: number
    questionId: number
    date: Date | string
    details?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ControlHistoryAnswerCreateOrConnectWithoutUserInput = {
    where: ControlHistoryAnswerWhereUniqueInput
    create: XOR<ControlHistoryAnswerCreateWithoutUserInput, ControlHistoryAnswerUncheckedCreateWithoutUserInput>
  }

  export type ControlHistoryAnswerCreateManyUserInputEnvelope = {
    data: ControlHistoryAnswerCreateManyUserInput | ControlHistoryAnswerCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FamilyHistoryAnswerUpsertWithWhereUniqueWithoutUserInput = {
    where: FamilyHistoryAnswerWhereUniqueInput
    update: XOR<FamilyHistoryAnswerUpdateWithoutUserInput, FamilyHistoryAnswerUncheckedUpdateWithoutUserInput>
    create: XOR<FamilyHistoryAnswerCreateWithoutUserInput, FamilyHistoryAnswerUncheckedCreateWithoutUserInput>
  }

  export type FamilyHistoryAnswerUpdateWithWhereUniqueWithoutUserInput = {
    where: FamilyHistoryAnswerWhereUniqueInput
    data: XOR<FamilyHistoryAnswerUpdateWithoutUserInput, FamilyHistoryAnswerUncheckedUpdateWithoutUserInput>
  }

  export type FamilyHistoryAnswerUpdateManyWithWhereWithoutUserInput = {
    where: FamilyHistoryAnswerScalarWhereInput
    data: XOR<FamilyHistoryAnswerUpdateManyMutationInput, FamilyHistoryAnswerUncheckedUpdateManyWithoutUserInput>
  }

  export type FamilyHistoryAnswerScalarWhereInput = {
    AND?: FamilyHistoryAnswerScalarWhereInput | FamilyHistoryAnswerScalarWhereInput[]
    OR?: FamilyHistoryAnswerScalarWhereInput[]
    NOT?: FamilyHistoryAnswerScalarWhereInput | FamilyHistoryAnswerScalarWhereInput[]
    id?: IntFilter<"FamilyHistoryAnswer"> | number
    userId?: IntFilter<"FamilyHistoryAnswer"> | number
    questionId?: IntFilter<"FamilyHistoryAnswer"> | number
    answer?: StringFilter<"FamilyHistoryAnswer"> | string
    details?: StringNullableFilter<"FamilyHistoryAnswer"> | string | null
    createdAt?: DateTimeFilter<"FamilyHistoryAnswer"> | Date | string
    updatedAt?: DateTimeFilter<"FamilyHistoryAnswer"> | Date | string
  }

  export type ControlHistoryAnswerUpsertWithWhereUniqueWithoutUserInput = {
    where: ControlHistoryAnswerWhereUniqueInput
    update: XOR<ControlHistoryAnswerUpdateWithoutUserInput, ControlHistoryAnswerUncheckedUpdateWithoutUserInput>
    create: XOR<ControlHistoryAnswerCreateWithoutUserInput, ControlHistoryAnswerUncheckedCreateWithoutUserInput>
  }

  export type ControlHistoryAnswerUpdateWithWhereUniqueWithoutUserInput = {
    where: ControlHistoryAnswerWhereUniqueInput
    data: XOR<ControlHistoryAnswerUpdateWithoutUserInput, ControlHistoryAnswerUncheckedUpdateWithoutUserInput>
  }

  export type ControlHistoryAnswerUpdateManyWithWhereWithoutUserInput = {
    where: ControlHistoryAnswerScalarWhereInput
    data: XOR<ControlHistoryAnswerUpdateManyMutationInput, ControlHistoryAnswerUncheckedUpdateManyWithoutUserInput>
  }

  export type ControlHistoryAnswerScalarWhereInput = {
    AND?: ControlHistoryAnswerScalarWhereInput | ControlHistoryAnswerScalarWhereInput[]
    OR?: ControlHistoryAnswerScalarWhereInput[]
    NOT?: ControlHistoryAnswerScalarWhereInput | ControlHistoryAnswerScalarWhereInput[]
    id?: IntFilter<"ControlHistoryAnswer"> | number
    userId?: IntFilter<"ControlHistoryAnswer"> | number
    questionId?: IntFilter<"ControlHistoryAnswer"> | number
    date?: DateTimeFilter<"ControlHistoryAnswer"> | Date | string
    details?: StringNullableFilter<"ControlHistoryAnswer"> | string | null
    createdAt?: DateTimeFilter<"ControlHistoryAnswer"> | Date | string
    updatedAt?: DateTimeFilter<"ControlHistoryAnswer"> | Date | string
  }

  export type FamilyHistoryAnswerCreateWithoutQuestionInput = {
    answer: string
    details?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutFamilyHistoryAnswersInput
  }

  export type FamilyHistoryAnswerUncheckedCreateWithoutQuestionInput = {
    id?: number
    userId: number
    answer: string
    details?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FamilyHistoryAnswerCreateOrConnectWithoutQuestionInput = {
    where: FamilyHistoryAnswerWhereUniqueInput
    create: XOR<FamilyHistoryAnswerCreateWithoutQuestionInput, FamilyHistoryAnswerUncheckedCreateWithoutQuestionInput>
  }

  export type FamilyHistoryAnswerCreateManyQuestionInputEnvelope = {
    data: FamilyHistoryAnswerCreateManyQuestionInput | FamilyHistoryAnswerCreateManyQuestionInput[]
    skipDuplicates?: boolean
  }

  export type FamilyHistoryAnswerUpsertWithWhereUniqueWithoutQuestionInput = {
    where: FamilyHistoryAnswerWhereUniqueInput
    update: XOR<FamilyHistoryAnswerUpdateWithoutQuestionInput, FamilyHistoryAnswerUncheckedUpdateWithoutQuestionInput>
    create: XOR<FamilyHistoryAnswerCreateWithoutQuestionInput, FamilyHistoryAnswerUncheckedCreateWithoutQuestionInput>
  }

  export type FamilyHistoryAnswerUpdateWithWhereUniqueWithoutQuestionInput = {
    where: FamilyHistoryAnswerWhereUniqueInput
    data: XOR<FamilyHistoryAnswerUpdateWithoutQuestionInput, FamilyHistoryAnswerUncheckedUpdateWithoutQuestionInput>
  }

  export type FamilyHistoryAnswerUpdateManyWithWhereWithoutQuestionInput = {
    where: FamilyHistoryAnswerScalarWhereInput
    data: XOR<FamilyHistoryAnswerUpdateManyMutationInput, FamilyHistoryAnswerUncheckedUpdateManyWithoutQuestionInput>
  }

  export type UserCreateWithoutFamilyHistoryAnswersInput = {
    email: string
    password: string
    name: string
    role?: $Enums.Role
    phone?: string | null
    birthDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    controlHistoryAnswers?: ControlHistoryAnswerCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFamilyHistoryAnswersInput = {
    id?: number
    email: string
    password: string
    name: string
    role?: $Enums.Role
    phone?: string | null
    birthDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    controlHistoryAnswers?: ControlHistoryAnswerUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFamilyHistoryAnswersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFamilyHistoryAnswersInput, UserUncheckedCreateWithoutFamilyHistoryAnswersInput>
  }

  export type FamilyHistoryQuestionCreateWithoutAnswersInput = {
    question: string
    description?: string | null
    isRequired?: boolean
    answerType: $Enums.AnswerType
    options?: NullableJsonNullValueInput | InputJsonValue
    allowMultiple?: boolean
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FamilyHistoryQuestionUncheckedCreateWithoutAnswersInput = {
    id?: number
    question: string
    description?: string | null
    isRequired?: boolean
    answerType: $Enums.AnswerType
    options?: NullableJsonNullValueInput | InputJsonValue
    allowMultiple?: boolean
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FamilyHistoryQuestionCreateOrConnectWithoutAnswersInput = {
    where: FamilyHistoryQuestionWhereUniqueInput
    create: XOR<FamilyHistoryQuestionCreateWithoutAnswersInput, FamilyHistoryQuestionUncheckedCreateWithoutAnswersInput>
  }

  export type UserUpsertWithoutFamilyHistoryAnswersInput = {
    update: XOR<UserUpdateWithoutFamilyHistoryAnswersInput, UserUncheckedUpdateWithoutFamilyHistoryAnswersInput>
    create: XOR<UserCreateWithoutFamilyHistoryAnswersInput, UserUncheckedCreateWithoutFamilyHistoryAnswersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFamilyHistoryAnswersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFamilyHistoryAnswersInput, UserUncheckedUpdateWithoutFamilyHistoryAnswersInput>
  }

  export type UserUpdateWithoutFamilyHistoryAnswersInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    controlHistoryAnswers?: ControlHistoryAnswerUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFamilyHistoryAnswersInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    controlHistoryAnswers?: ControlHistoryAnswerUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FamilyHistoryQuestionUpsertWithoutAnswersInput = {
    update: XOR<FamilyHistoryQuestionUpdateWithoutAnswersInput, FamilyHistoryQuestionUncheckedUpdateWithoutAnswersInput>
    create: XOR<FamilyHistoryQuestionCreateWithoutAnswersInput, FamilyHistoryQuestionUncheckedCreateWithoutAnswersInput>
    where?: FamilyHistoryQuestionWhereInput
  }

  export type FamilyHistoryQuestionUpdateToOneWithWhereWithoutAnswersInput = {
    where?: FamilyHistoryQuestionWhereInput
    data: XOR<FamilyHistoryQuestionUpdateWithoutAnswersInput, FamilyHistoryQuestionUncheckedUpdateWithoutAnswersInput>
  }

  export type FamilyHistoryQuestionUpdateWithoutAnswersInput = {
    question?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    answerType?: EnumAnswerTypeFieldUpdateOperationsInput | $Enums.AnswerType
    options?: NullableJsonNullValueInput | InputJsonValue
    allowMultiple?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FamilyHistoryQuestionUncheckedUpdateWithoutAnswersInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    answerType?: EnumAnswerTypeFieldUpdateOperationsInput | $Enums.AnswerType
    options?: NullableJsonNullValueInput | InputJsonValue
    allowMultiple?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ControlHistoryAnswerCreateWithoutQuestionInput = {
    date: Date | string
    details?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutControlHistoryAnswersInput
  }

  export type ControlHistoryAnswerUncheckedCreateWithoutQuestionInput = {
    id?: number
    userId: number
    date: Date | string
    details?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ControlHistoryAnswerCreateOrConnectWithoutQuestionInput = {
    where: ControlHistoryAnswerWhereUniqueInput
    create: XOR<ControlHistoryAnswerCreateWithoutQuestionInput, ControlHistoryAnswerUncheckedCreateWithoutQuestionInput>
  }

  export type ControlHistoryAnswerCreateManyQuestionInputEnvelope = {
    data: ControlHistoryAnswerCreateManyQuestionInput | ControlHistoryAnswerCreateManyQuestionInput[]
    skipDuplicates?: boolean
  }

  export type ControlHistoryAnswerUpsertWithWhereUniqueWithoutQuestionInput = {
    where: ControlHistoryAnswerWhereUniqueInput
    update: XOR<ControlHistoryAnswerUpdateWithoutQuestionInput, ControlHistoryAnswerUncheckedUpdateWithoutQuestionInput>
    create: XOR<ControlHistoryAnswerCreateWithoutQuestionInput, ControlHistoryAnswerUncheckedCreateWithoutQuestionInput>
  }

  export type ControlHistoryAnswerUpdateWithWhereUniqueWithoutQuestionInput = {
    where: ControlHistoryAnswerWhereUniqueInput
    data: XOR<ControlHistoryAnswerUpdateWithoutQuestionInput, ControlHistoryAnswerUncheckedUpdateWithoutQuestionInput>
  }

  export type ControlHistoryAnswerUpdateManyWithWhereWithoutQuestionInput = {
    where: ControlHistoryAnswerScalarWhereInput
    data: XOR<ControlHistoryAnswerUpdateManyMutationInput, ControlHistoryAnswerUncheckedUpdateManyWithoutQuestionInput>
  }

  export type UserCreateWithoutControlHistoryAnswersInput = {
    email: string
    password: string
    name: string
    role?: $Enums.Role
    phone?: string | null
    birthDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    familyHistoryAnswers?: FamilyHistoryAnswerCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutControlHistoryAnswersInput = {
    id?: number
    email: string
    password: string
    name: string
    role?: $Enums.Role
    phone?: string | null
    birthDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    familyHistoryAnswers?: FamilyHistoryAnswerUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutControlHistoryAnswersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutControlHistoryAnswersInput, UserUncheckedCreateWithoutControlHistoryAnswersInput>
  }

  export type ControlHistoryQuestionCreateWithoutAnswersInput = {
    question: string
    description?: string | null
    isRequired?: boolean
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ControlHistoryQuestionUncheckedCreateWithoutAnswersInput = {
    id?: number
    question: string
    description?: string | null
    isRequired?: boolean
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ControlHistoryQuestionCreateOrConnectWithoutAnswersInput = {
    where: ControlHistoryQuestionWhereUniqueInput
    create: XOR<ControlHistoryQuestionCreateWithoutAnswersInput, ControlHistoryQuestionUncheckedCreateWithoutAnswersInput>
  }

  export type UserUpsertWithoutControlHistoryAnswersInput = {
    update: XOR<UserUpdateWithoutControlHistoryAnswersInput, UserUncheckedUpdateWithoutControlHistoryAnswersInput>
    create: XOR<UserCreateWithoutControlHistoryAnswersInput, UserUncheckedCreateWithoutControlHistoryAnswersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutControlHistoryAnswersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutControlHistoryAnswersInput, UserUncheckedUpdateWithoutControlHistoryAnswersInput>
  }

  export type UserUpdateWithoutControlHistoryAnswersInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    familyHistoryAnswers?: FamilyHistoryAnswerUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutControlHistoryAnswersInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: NullableJsonNullValueInput | InputJsonValue
    familyHistoryAnswers?: FamilyHistoryAnswerUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ControlHistoryQuestionUpsertWithoutAnswersInput = {
    update: XOR<ControlHistoryQuestionUpdateWithoutAnswersInput, ControlHistoryQuestionUncheckedUpdateWithoutAnswersInput>
    create: XOR<ControlHistoryQuestionCreateWithoutAnswersInput, ControlHistoryQuestionUncheckedCreateWithoutAnswersInput>
    where?: ControlHistoryQuestionWhereInput
  }

  export type ControlHistoryQuestionUpdateToOneWithWhereWithoutAnswersInput = {
    where?: ControlHistoryQuestionWhereInput
    data: XOR<ControlHistoryQuestionUpdateWithoutAnswersInput, ControlHistoryQuestionUncheckedUpdateWithoutAnswersInput>
  }

  export type ControlHistoryQuestionUpdateWithoutAnswersInput = {
    question?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ControlHistoryQuestionUncheckedUpdateWithoutAnswersInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FamilyHistoryAnswerCreateManyUserInput = {
    id?: number
    questionId: number
    answer: string
    details?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ControlHistoryAnswerCreateManyUserInput = {
    id?: number
    questionId: number
    date: Date | string
    details?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FamilyHistoryAnswerUpdateWithoutUserInput = {
    answer?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    question?: FamilyHistoryQuestionUpdateOneRequiredWithoutAnswersNestedInput
  }

  export type FamilyHistoryAnswerUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    answer?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FamilyHistoryAnswerUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    answer?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ControlHistoryAnswerUpdateWithoutUserInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    question?: ControlHistoryQuestionUpdateOneRequiredWithoutAnswersNestedInput
  }

  export type ControlHistoryAnswerUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ControlHistoryAnswerUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FamilyHistoryAnswerCreateManyQuestionInput = {
    id?: number
    userId: number
    answer: string
    details?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FamilyHistoryAnswerUpdateWithoutQuestionInput = {
    answer?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFamilyHistoryAnswersNestedInput
  }

  export type FamilyHistoryAnswerUncheckedUpdateWithoutQuestionInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    answer?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FamilyHistoryAnswerUncheckedUpdateManyWithoutQuestionInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    answer?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ControlHistoryAnswerCreateManyQuestionInput = {
    id?: number
    userId: number
    date: Date | string
    details?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ControlHistoryAnswerUpdateWithoutQuestionInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutControlHistoryAnswersNestedInput
  }

  export type ControlHistoryAnswerUncheckedUpdateWithoutQuestionInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ControlHistoryAnswerUncheckedUpdateManyWithoutQuestionInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FamilyHistoryQuestionCountOutputTypeDefaultArgs instead
     */
    export type FamilyHistoryQuestionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FamilyHistoryQuestionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ControlHistoryQuestionCountOutputTypeDefaultArgs instead
     */
    export type ControlHistoryQuestionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ControlHistoryQuestionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProfileConfigDefaultArgs instead
     */
    export type ProfileConfigArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProfileConfigDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProfileFieldDefaultArgs instead
     */
    export type ProfileFieldArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProfileFieldDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FamilyHistoryQuestionDefaultArgs instead
     */
    export type FamilyHistoryQuestionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FamilyHistoryQuestionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FamilyHistoryAnswerDefaultArgs instead
     */
    export type FamilyHistoryAnswerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FamilyHistoryAnswerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ControlHistoryQuestionDefaultArgs instead
     */
    export type ControlHistoryQuestionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ControlHistoryQuestionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ControlHistoryAnswerDefaultArgs instead
     */
    export type ControlHistoryAnswerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ControlHistoryAnswerDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}